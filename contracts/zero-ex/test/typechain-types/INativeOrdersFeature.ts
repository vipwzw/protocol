/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace LibNativeOrder {
  export type LimitOrderStruct = {
    makerToken: AddressLike;
    takerToken: AddressLike;
    makerAmount: BigNumberish;
    takerAmount: BigNumberish;
    takerTokenFeeAmount: BigNumberish;
    maker: AddressLike;
    taker: AddressLike;
    sender: AddressLike;
    feeRecipient: AddressLike;
    pool: BytesLike;
    expiry: BigNumberish;
    salt: BigNumberish;
  };

  export type LimitOrderStructOutput = [
    makerToken: string,
    takerToken: string,
    makerAmount: bigint,
    takerAmount: bigint,
    takerTokenFeeAmount: bigint,
    maker: string,
    taker: string,
    sender: string,
    feeRecipient: string,
    pool: string,
    expiry: bigint,
    salt: bigint
  ] & {
    makerToken: string;
    takerToken: string;
    makerAmount: bigint;
    takerAmount: bigint;
    takerTokenFeeAmount: bigint;
    maker: string;
    taker: string;
    sender: string;
    feeRecipient: string;
    pool: string;
    expiry: bigint;
    salt: bigint;
  };

  export type RfqOrderStruct = {
    makerToken: AddressLike;
    takerToken: AddressLike;
    makerAmount: BigNumberish;
    takerAmount: BigNumberish;
    maker: AddressLike;
    taker: AddressLike;
    txOrigin: AddressLike;
    pool: BytesLike;
    expiry: BigNumberish;
    salt: BigNumberish;
  };

  export type RfqOrderStructOutput = [
    makerToken: string,
    takerToken: string,
    makerAmount: bigint,
    takerAmount: bigint,
    maker: string,
    taker: string,
    txOrigin: string,
    pool: string,
    expiry: bigint,
    salt: bigint
  ] & {
    makerToken: string;
    takerToken: string;
    makerAmount: bigint;
    takerAmount: bigint;
    maker: string;
    taker: string;
    txOrigin: string;
    pool: string;
    expiry: bigint;
    salt: bigint;
  };

  export type OrderInfoStruct = {
    orderHash: BytesLike;
    status: BigNumberish;
    takerTokenFilledAmount: BigNumberish;
  };

  export type OrderInfoStructOutput = [
    orderHash: string,
    status: bigint,
    takerTokenFilledAmount: bigint
  ] & { orderHash: string; status: bigint; takerTokenFilledAmount: bigint };
}

export declare namespace LibSignature {
  export type SignatureStruct = {
    signatureType: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type SignatureStructOutput = [
    signatureType: bigint,
    v: bigint,
    r: string,
    s: string
  ] & { signatureType: bigint; v: bigint; r: string; s: string };
}

export interface INativeOrdersFeatureInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_fillLimitOrder"
      | "_fillRfqOrder"
      | "batchCancelLimitOrders"
      | "batchCancelPairLimitOrders"
      | "batchCancelPairLimitOrdersWithSigner"
      | "batchCancelPairRfqOrders"
      | "batchCancelPairRfqOrdersWithSigner"
      | "batchCancelRfqOrders"
      | "batchGetLimitOrderRelevantStates"
      | "batchGetRfqOrderRelevantStates"
      | "cancelLimitOrder"
      | "cancelPairLimitOrders"
      | "cancelPairLimitOrdersWithSigner"
      | "cancelPairRfqOrders"
      | "cancelPairRfqOrdersWithSigner"
      | "cancelRfqOrder"
      | "fillLimitOrder"
      | "fillOrKillLimitOrder"
      | "fillOrKillRfqOrder"
      | "fillRfqOrder"
      | "getLimitOrderHash"
      | "getLimitOrderInfo"
      | "getLimitOrderRelevantState"
      | "getProtocolFeeMultiplier"
      | "getRfqOrderHash"
      | "getRfqOrderInfo"
      | "getRfqOrderRelevantState"
      | "isValidOrderSigner"
      | "registerAllowedOrderSigner"
      | "registerAllowedRfqOrigins"
      | "transferProtocolFeesForPools"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LimitOrderFilled"
      | "OrderCancelled"
      | "OrderSignerRegistered"
      | "PairCancelledLimitOrders"
      | "PairCancelledRfqOrders"
      | "RfqOrderFilled"
      | "RfqOrderOriginsAllowed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_fillLimitOrder",
    values: [
      LibNativeOrder.LimitOrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_fillRfqOrder",
    values: [
      LibNativeOrder.RfqOrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish,
      AddressLike,
      boolean,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCancelLimitOrders",
    values: [LibNativeOrder.LimitOrderStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCancelPairLimitOrders",
    values: [AddressLike[], AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCancelPairLimitOrdersWithSigner",
    values: [AddressLike, AddressLike[], AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCancelPairRfqOrders",
    values: [AddressLike[], AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCancelPairRfqOrdersWithSigner",
    values: [AddressLike, AddressLike[], AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCancelRfqOrders",
    values: [LibNativeOrder.RfqOrderStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchGetLimitOrderRelevantStates",
    values: [LibNativeOrder.LimitOrderStruct[], LibSignature.SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchGetRfqOrderRelevantStates",
    values: [LibNativeOrder.RfqOrderStruct[], LibSignature.SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLimitOrder",
    values: [LibNativeOrder.LimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPairLimitOrders",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPairLimitOrdersWithSigner",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPairRfqOrders",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPairRfqOrdersWithSigner",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRfqOrder",
    values: [LibNativeOrder.RfqOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "fillLimitOrder",
    values: [
      LibNativeOrder.LimitOrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrKillLimitOrder",
    values: [
      LibNativeOrder.LimitOrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrKillRfqOrder",
    values: [
      LibNativeOrder.RfqOrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillRfqOrder",
    values: [
      LibNativeOrder.RfqOrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLimitOrderHash",
    values: [LibNativeOrder.LimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getLimitOrderInfo",
    values: [LibNativeOrder.LimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getLimitOrderRelevantState",
    values: [LibNativeOrder.LimitOrderStruct, LibSignature.SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFeeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRfqOrderHash",
    values: [LibNativeOrder.RfqOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRfqOrderInfo",
    values: [LibNativeOrder.RfqOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRfqOrderRelevantState",
    values: [LibNativeOrder.RfqOrderStruct, LibSignature.SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidOrderSigner",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAllowedOrderSigner",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAllowedRfqOrigins",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferProtocolFeesForPools",
    values: [BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "_fillLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_fillRfqOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCancelLimitOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCancelPairLimitOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCancelPairLimitOrdersWithSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCancelPairRfqOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCancelPairRfqOrdersWithSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCancelRfqOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchGetLimitOrderRelevantStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchGetRfqOrderRelevantStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPairLimitOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPairLimitOrdersWithSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPairRfqOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPairRfqOrdersWithSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelRfqOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOrKillLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOrKillRfqOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillRfqOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLimitOrderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLimitOrderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLimitOrderRelevantState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFeeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRfqOrderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRfqOrderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRfqOrderRelevantState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidOrderSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAllowedOrderSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAllowedRfqOrigins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferProtocolFeesForPools",
    data: BytesLike
  ): Result;
}

export namespace LimitOrderFilledEvent {
  export type InputTuple = [
    orderHash: BytesLike,
    maker: AddressLike,
    taker: AddressLike,
    feeRecipient: AddressLike,
    makerToken: AddressLike,
    takerToken: AddressLike,
    takerTokenFilledAmount: BigNumberish,
    makerTokenFilledAmount: BigNumberish,
    takerTokenFeeFilledAmount: BigNumberish,
    protocolFeePaid: BigNumberish,
    pool: BytesLike
  ];
  export type OutputTuple = [
    orderHash: string,
    maker: string,
    taker: string,
    feeRecipient: string,
    makerToken: string,
    takerToken: string,
    takerTokenFilledAmount: bigint,
    makerTokenFilledAmount: bigint,
    takerTokenFeeFilledAmount: bigint,
    protocolFeePaid: bigint,
    pool: string
  ];
  export interface OutputObject {
    orderHash: string;
    maker: string;
    taker: string;
    feeRecipient: string;
    makerToken: string;
    takerToken: string;
    takerTokenFilledAmount: bigint;
    makerTokenFilledAmount: bigint;
    takerTokenFeeFilledAmount: bigint;
    protocolFeePaid: bigint;
    pool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderCancelledEvent {
  export type InputTuple = [orderHash: BytesLike, maker: AddressLike];
  export type OutputTuple = [orderHash: string, maker: string];
  export interface OutputObject {
    orderHash: string;
    maker: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderSignerRegisteredEvent {
  export type InputTuple = [
    maker: AddressLike,
    signer: AddressLike,
    allowed: boolean
  ];
  export type OutputTuple = [maker: string, signer: string, allowed: boolean];
  export interface OutputObject {
    maker: string;
    signer: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PairCancelledLimitOrdersEvent {
  export type InputTuple = [
    maker: AddressLike,
    makerToken: AddressLike,
    takerToken: AddressLike,
    minValidSalt: BigNumberish
  ];
  export type OutputTuple = [
    maker: string,
    makerToken: string,
    takerToken: string,
    minValidSalt: bigint
  ];
  export interface OutputObject {
    maker: string;
    makerToken: string;
    takerToken: string;
    minValidSalt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PairCancelledRfqOrdersEvent {
  export type InputTuple = [
    maker: AddressLike,
    makerToken: AddressLike,
    takerToken: AddressLike,
    minValidSalt: BigNumberish
  ];
  export type OutputTuple = [
    maker: string,
    makerToken: string,
    takerToken: string,
    minValidSalt: bigint
  ];
  export interface OutputObject {
    maker: string;
    makerToken: string;
    takerToken: string;
    minValidSalt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RfqOrderFilledEvent {
  export type InputTuple = [
    orderHash: BytesLike,
    maker: AddressLike,
    taker: AddressLike,
    makerToken: AddressLike,
    takerToken: AddressLike,
    takerTokenFilledAmount: BigNumberish,
    makerTokenFilledAmount: BigNumberish,
    pool: BytesLike
  ];
  export type OutputTuple = [
    orderHash: string,
    maker: string,
    taker: string,
    makerToken: string,
    takerToken: string,
    takerTokenFilledAmount: bigint,
    makerTokenFilledAmount: bigint,
    pool: string
  ];
  export interface OutputObject {
    orderHash: string;
    maker: string;
    taker: string;
    makerToken: string;
    takerToken: string;
    takerTokenFilledAmount: bigint;
    makerTokenFilledAmount: bigint;
    pool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RfqOrderOriginsAllowedEvent {
  export type InputTuple = [
    origin: AddressLike,
    addrs: AddressLike[],
    allowed: boolean
  ];
  export type OutputTuple = [origin: string, addrs: string[], allowed: boolean];
  export interface OutputObject {
    origin: string;
    addrs: string[];
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface INativeOrdersFeature extends BaseContract {
  connect(runner?: ContractRunner | null): INativeOrdersFeature;
  waitForDeployment(): Promise<this>;

  interface: INativeOrdersFeatureInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _fillLimitOrder: TypedContractMethod<
    [
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: AddressLike,
      sender: AddressLike
    ],
    [
      [bigint, bigint] & {
        takerTokenFilledAmount: bigint;
        makerTokenFilledAmount: bigint;
      }
    ],
    "payable"
  >;

  _fillRfqOrder: TypedContractMethod<
    [
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: AddressLike,
      useSelfBalance: boolean,
      recipient: AddressLike
    ],
    [
      [bigint, bigint] & {
        takerTokenFilledAmount: bigint;
        makerTokenFilledAmount: bigint;
      }
    ],
    "nonpayable"
  >;

  batchCancelLimitOrders: TypedContractMethod<
    [orders: LibNativeOrder.LimitOrderStruct[]],
    [void],
    "nonpayable"
  >;

  batchCancelPairLimitOrders: TypedContractMethod<
    [
      makerTokens: AddressLike[],
      takerTokens: AddressLike[],
      minValidSalts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  batchCancelPairLimitOrdersWithSigner: TypedContractMethod<
    [
      maker: AddressLike,
      makerTokens: AddressLike[],
      takerTokens: AddressLike[],
      minValidSalts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  batchCancelPairRfqOrders: TypedContractMethod<
    [
      makerTokens: AddressLike[],
      takerTokens: AddressLike[],
      minValidSalts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  batchCancelPairRfqOrdersWithSigner: TypedContractMethod<
    [
      maker: AddressLike,
      makerTokens: AddressLike[],
      takerTokens: AddressLike[],
      minValidSalts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  batchCancelRfqOrders: TypedContractMethod<
    [orders: LibNativeOrder.RfqOrderStruct[]],
    [void],
    "nonpayable"
  >;

  batchGetLimitOrderRelevantStates: TypedContractMethod<
    [
      orders: LibNativeOrder.LimitOrderStruct[],
      signatures: LibSignature.SignatureStruct[]
    ],
    [
      [LibNativeOrder.OrderInfoStructOutput[], bigint[], boolean[]] & {
        orderInfos: LibNativeOrder.OrderInfoStructOutput[];
        actualFillableTakerTokenAmounts: bigint[];
        isSignatureValids: boolean[];
      }
    ],
    "view"
  >;

  batchGetRfqOrderRelevantStates: TypedContractMethod<
    [
      orders: LibNativeOrder.RfqOrderStruct[],
      signatures: LibSignature.SignatureStruct[]
    ],
    [
      [LibNativeOrder.OrderInfoStructOutput[], bigint[], boolean[]] & {
        orderInfos: LibNativeOrder.OrderInfoStructOutput[];
        actualFillableTakerTokenAmounts: bigint[];
        isSignatureValids: boolean[];
      }
    ],
    "view"
  >;

  cancelLimitOrder: TypedContractMethod<
    [order: LibNativeOrder.LimitOrderStruct],
    [void],
    "nonpayable"
  >;

  cancelPairLimitOrders: TypedContractMethod<
    [
      makerToken: AddressLike,
      takerToken: AddressLike,
      minValidSalt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  cancelPairLimitOrdersWithSigner: TypedContractMethod<
    [
      maker: AddressLike,
      makerToken: AddressLike,
      takerToken: AddressLike,
      minValidSalt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  cancelPairRfqOrders: TypedContractMethod<
    [
      makerToken: AddressLike,
      takerToken: AddressLike,
      minValidSalt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  cancelPairRfqOrdersWithSigner: TypedContractMethod<
    [
      maker: AddressLike,
      makerToken: AddressLike,
      takerToken: AddressLike,
      minValidSalt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  cancelRfqOrder: TypedContractMethod<
    [order: LibNativeOrder.RfqOrderStruct],
    [void],
    "nonpayable"
  >;

  fillLimitOrder: TypedContractMethod<
    [
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish
    ],
    [
      [bigint, bigint] & {
        takerTokenFilledAmount: bigint;
        makerTokenFilledAmount: bigint;
      }
    ],
    "payable"
  >;

  fillOrKillLimitOrder: TypedContractMethod<
    [
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  fillOrKillRfqOrder: TypedContractMethod<
    [
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  fillRfqOrder: TypedContractMethod<
    [
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish
    ],
    [
      [bigint, bigint] & {
        takerTokenFilledAmount: bigint;
        makerTokenFilledAmount: bigint;
      }
    ],
    "nonpayable"
  >;

  getLimitOrderHash: TypedContractMethod<
    [order: LibNativeOrder.LimitOrderStruct],
    [string],
    "view"
  >;

  getLimitOrderInfo: TypedContractMethod<
    [order: LibNativeOrder.LimitOrderStruct],
    [LibNativeOrder.OrderInfoStructOutput],
    "view"
  >;

  getLimitOrderRelevantState: TypedContractMethod<
    [
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct
    ],
    [
      [LibNativeOrder.OrderInfoStructOutput, bigint, boolean] & {
        orderInfo: LibNativeOrder.OrderInfoStructOutput;
        actualFillableTakerTokenAmount: bigint;
        isSignatureValid: boolean;
      }
    ],
    "view"
  >;

  getProtocolFeeMultiplier: TypedContractMethod<[], [bigint], "view">;

  getRfqOrderHash: TypedContractMethod<
    [order: LibNativeOrder.RfqOrderStruct],
    [string],
    "view"
  >;

  getRfqOrderInfo: TypedContractMethod<
    [order: LibNativeOrder.RfqOrderStruct],
    [LibNativeOrder.OrderInfoStructOutput],
    "view"
  >;

  getRfqOrderRelevantState: TypedContractMethod<
    [
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct
    ],
    [
      [LibNativeOrder.OrderInfoStructOutput, bigint, boolean] & {
        orderInfo: LibNativeOrder.OrderInfoStructOutput;
        actualFillableTakerTokenAmount: bigint;
        isSignatureValid: boolean;
      }
    ],
    "view"
  >;

  isValidOrderSigner: TypedContractMethod<
    [maker: AddressLike, signer: AddressLike],
    [boolean],
    "view"
  >;

  registerAllowedOrderSigner: TypedContractMethod<
    [signer: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  registerAllowedRfqOrigins: TypedContractMethod<
    [origins: AddressLike[], allowed: boolean],
    [void],
    "nonpayable"
  >;

  transferProtocolFeesForPools: TypedContractMethod<
    [poolIds: BytesLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_fillLimitOrder"
  ): TypedContractMethod<
    [
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: AddressLike,
      sender: AddressLike
    ],
    [
      [bigint, bigint] & {
        takerTokenFilledAmount: bigint;
        makerTokenFilledAmount: bigint;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "_fillRfqOrder"
  ): TypedContractMethod<
    [
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: AddressLike,
      useSelfBalance: boolean,
      recipient: AddressLike
    ],
    [
      [bigint, bigint] & {
        takerTokenFilledAmount: bigint;
        makerTokenFilledAmount: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchCancelLimitOrders"
  ): TypedContractMethod<
    [orders: LibNativeOrder.LimitOrderStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchCancelPairLimitOrders"
  ): TypedContractMethod<
    [
      makerTokens: AddressLike[],
      takerTokens: AddressLike[],
      minValidSalts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchCancelPairLimitOrdersWithSigner"
  ): TypedContractMethod<
    [
      maker: AddressLike,
      makerTokens: AddressLike[],
      takerTokens: AddressLike[],
      minValidSalts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchCancelPairRfqOrders"
  ): TypedContractMethod<
    [
      makerTokens: AddressLike[],
      takerTokens: AddressLike[],
      minValidSalts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchCancelPairRfqOrdersWithSigner"
  ): TypedContractMethod<
    [
      maker: AddressLike,
      makerTokens: AddressLike[],
      takerTokens: AddressLike[],
      minValidSalts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchCancelRfqOrders"
  ): TypedContractMethod<
    [orders: LibNativeOrder.RfqOrderStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchGetLimitOrderRelevantStates"
  ): TypedContractMethod<
    [
      orders: LibNativeOrder.LimitOrderStruct[],
      signatures: LibSignature.SignatureStruct[]
    ],
    [
      [LibNativeOrder.OrderInfoStructOutput[], bigint[], boolean[]] & {
        orderInfos: LibNativeOrder.OrderInfoStructOutput[];
        actualFillableTakerTokenAmounts: bigint[];
        isSignatureValids: boolean[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchGetRfqOrderRelevantStates"
  ): TypedContractMethod<
    [
      orders: LibNativeOrder.RfqOrderStruct[],
      signatures: LibSignature.SignatureStruct[]
    ],
    [
      [LibNativeOrder.OrderInfoStructOutput[], bigint[], boolean[]] & {
        orderInfos: LibNativeOrder.OrderInfoStructOutput[];
        actualFillableTakerTokenAmounts: bigint[];
        isSignatureValids: boolean[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelLimitOrder"
  ): TypedContractMethod<
    [order: LibNativeOrder.LimitOrderStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelPairLimitOrders"
  ): TypedContractMethod<
    [
      makerToken: AddressLike,
      takerToken: AddressLike,
      minValidSalt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelPairLimitOrdersWithSigner"
  ): TypedContractMethod<
    [
      maker: AddressLike,
      makerToken: AddressLike,
      takerToken: AddressLike,
      minValidSalt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelPairRfqOrders"
  ): TypedContractMethod<
    [
      makerToken: AddressLike,
      takerToken: AddressLike,
      minValidSalt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelPairRfqOrdersWithSigner"
  ): TypedContractMethod<
    [
      maker: AddressLike,
      makerToken: AddressLike,
      takerToken: AddressLike,
      minValidSalt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelRfqOrder"
  ): TypedContractMethod<
    [order: LibNativeOrder.RfqOrderStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillLimitOrder"
  ): TypedContractMethod<
    [
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish
    ],
    [
      [bigint, bigint] & {
        takerTokenFilledAmount: bigint;
        makerTokenFilledAmount: bigint;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "fillOrKillLimitOrder"
  ): TypedContractMethod<
    [
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "fillOrKillRfqOrder"
  ): TypedContractMethod<
    [
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillRfqOrder"
  ): TypedContractMethod<
    [
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish
    ],
    [
      [bigint, bigint] & {
        takerTokenFilledAmount: bigint;
        makerTokenFilledAmount: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getLimitOrderHash"
  ): TypedContractMethod<
    [order: LibNativeOrder.LimitOrderStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLimitOrderInfo"
  ): TypedContractMethod<
    [order: LibNativeOrder.LimitOrderStruct],
    [LibNativeOrder.OrderInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLimitOrderRelevantState"
  ): TypedContractMethod<
    [
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct
    ],
    [
      [LibNativeOrder.OrderInfoStructOutput, bigint, boolean] & {
        orderInfo: LibNativeOrder.OrderInfoStructOutput;
        actualFillableTakerTokenAmount: bigint;
        isSignatureValid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProtocolFeeMultiplier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRfqOrderHash"
  ): TypedContractMethod<
    [order: LibNativeOrder.RfqOrderStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRfqOrderInfo"
  ): TypedContractMethod<
    [order: LibNativeOrder.RfqOrderStruct],
    [LibNativeOrder.OrderInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRfqOrderRelevantState"
  ): TypedContractMethod<
    [
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct
    ],
    [
      [LibNativeOrder.OrderInfoStructOutput, bigint, boolean] & {
        orderInfo: LibNativeOrder.OrderInfoStructOutput;
        actualFillableTakerTokenAmount: bigint;
        isSignatureValid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidOrderSigner"
  ): TypedContractMethod<
    [maker: AddressLike, signer: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerAllowedOrderSigner"
  ): TypedContractMethod<
    [signer: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerAllowedRfqOrigins"
  ): TypedContractMethod<
    [origins: AddressLike[], allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferProtocolFeesForPools"
  ): TypedContractMethod<[poolIds: BytesLike[]], [void], "nonpayable">;

  getEvent(
    key: "LimitOrderFilled"
  ): TypedContractEvent<
    LimitOrderFilledEvent.InputTuple,
    LimitOrderFilledEvent.OutputTuple,
    LimitOrderFilledEvent.OutputObject
  >;
  getEvent(
    key: "OrderCancelled"
  ): TypedContractEvent<
    OrderCancelledEvent.InputTuple,
    OrderCancelledEvent.OutputTuple,
    OrderCancelledEvent.OutputObject
  >;
  getEvent(
    key: "OrderSignerRegistered"
  ): TypedContractEvent<
    OrderSignerRegisteredEvent.InputTuple,
    OrderSignerRegisteredEvent.OutputTuple,
    OrderSignerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "PairCancelledLimitOrders"
  ): TypedContractEvent<
    PairCancelledLimitOrdersEvent.InputTuple,
    PairCancelledLimitOrdersEvent.OutputTuple,
    PairCancelledLimitOrdersEvent.OutputObject
  >;
  getEvent(
    key: "PairCancelledRfqOrders"
  ): TypedContractEvent<
    PairCancelledRfqOrdersEvent.InputTuple,
    PairCancelledRfqOrdersEvent.OutputTuple,
    PairCancelledRfqOrdersEvent.OutputObject
  >;
  getEvent(
    key: "RfqOrderFilled"
  ): TypedContractEvent<
    RfqOrderFilledEvent.InputTuple,
    RfqOrderFilledEvent.OutputTuple,
    RfqOrderFilledEvent.OutputObject
  >;
  getEvent(
    key: "RfqOrderOriginsAllowed"
  ): TypedContractEvent<
    RfqOrderOriginsAllowedEvent.InputTuple,
    RfqOrderOriginsAllowedEvent.OutputTuple,
    RfqOrderOriginsAllowedEvent.OutputObject
  >;

  filters: {
    "LimitOrderFilled(bytes32,address,address,address,address,address,uint128,uint128,uint128,uint256,bytes32)": TypedContractEvent<
      LimitOrderFilledEvent.InputTuple,
      LimitOrderFilledEvent.OutputTuple,
      LimitOrderFilledEvent.OutputObject
    >;
    LimitOrderFilled: TypedContractEvent<
      LimitOrderFilledEvent.InputTuple,
      LimitOrderFilledEvent.OutputTuple,
      LimitOrderFilledEvent.OutputObject
    >;

    "OrderCancelled(bytes32,address)": TypedContractEvent<
      OrderCancelledEvent.InputTuple,
      OrderCancelledEvent.OutputTuple,
      OrderCancelledEvent.OutputObject
    >;
    OrderCancelled: TypedContractEvent<
      OrderCancelledEvent.InputTuple,
      OrderCancelledEvent.OutputTuple,
      OrderCancelledEvent.OutputObject
    >;

    "OrderSignerRegistered(address,address,bool)": TypedContractEvent<
      OrderSignerRegisteredEvent.InputTuple,
      OrderSignerRegisteredEvent.OutputTuple,
      OrderSignerRegisteredEvent.OutputObject
    >;
    OrderSignerRegistered: TypedContractEvent<
      OrderSignerRegisteredEvent.InputTuple,
      OrderSignerRegisteredEvent.OutputTuple,
      OrderSignerRegisteredEvent.OutputObject
    >;

    "PairCancelledLimitOrders(address,address,address,uint256)": TypedContractEvent<
      PairCancelledLimitOrdersEvent.InputTuple,
      PairCancelledLimitOrdersEvent.OutputTuple,
      PairCancelledLimitOrdersEvent.OutputObject
    >;
    PairCancelledLimitOrders: TypedContractEvent<
      PairCancelledLimitOrdersEvent.InputTuple,
      PairCancelledLimitOrdersEvent.OutputTuple,
      PairCancelledLimitOrdersEvent.OutputObject
    >;

    "PairCancelledRfqOrders(address,address,address,uint256)": TypedContractEvent<
      PairCancelledRfqOrdersEvent.InputTuple,
      PairCancelledRfqOrdersEvent.OutputTuple,
      PairCancelledRfqOrdersEvent.OutputObject
    >;
    PairCancelledRfqOrders: TypedContractEvent<
      PairCancelledRfqOrdersEvent.InputTuple,
      PairCancelledRfqOrdersEvent.OutputTuple,
      PairCancelledRfqOrdersEvent.OutputObject
    >;

    "RfqOrderFilled(bytes32,address,address,address,address,uint128,uint128,bytes32)": TypedContractEvent<
      RfqOrderFilledEvent.InputTuple,
      RfqOrderFilledEvent.OutputTuple,
      RfqOrderFilledEvent.OutputObject
    >;
    RfqOrderFilled: TypedContractEvent<
      RfqOrderFilledEvent.InputTuple,
      RfqOrderFilledEvent.OutputTuple,
      RfqOrderFilledEvent.OutputObject
    >;

    "RfqOrderOriginsAllowed(address,address[],bool)": TypedContractEvent<
      RfqOrderOriginsAllowedEvent.InputTuple,
      RfqOrderOriginsAllowedEvent.OutputTuple,
      RfqOrderOriginsAllowedEvent.OutputObject
    >;
    RfqOrderOriginsAllowed: TypedContractEvent<
      RfqOrderOriginsAllowedEvent.InputTuple,
      RfqOrderOriginsAllowedEvent.OutputTuple,
      RfqOrderOriginsAllowedEvent.OutputObject
    >;
  };
}
