/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ILiquidityProviderFeatureInterface extends Interface {
  getFunction(nameOrSignature: "sellToLiquidityProvider"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "LiquidityProviderSwap"): EventFragment;

  encodeFunctionData(
    functionFragment: "sellToLiquidityProvider",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "sellToLiquidityProvider",
    data: BytesLike
  ): Result;
}

export namespace LiquidityProviderSwapEvent {
  export type InputTuple = [
    inputToken: AddressLike,
    outputToken: AddressLike,
    inputTokenAmount: BigNumberish,
    outputTokenAmount: BigNumberish,
    provider: AddressLike,
    recipient: AddressLike
  ];
  export type OutputTuple = [
    inputToken: string,
    outputToken: string,
    inputTokenAmount: bigint,
    outputTokenAmount: bigint,
    provider: string,
    recipient: string
  ];
  export interface OutputObject {
    inputToken: string;
    outputToken: string;
    inputTokenAmount: bigint;
    outputTokenAmount: bigint;
    provider: string;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ILiquidityProviderFeature extends BaseContract {
  connect(runner?: ContractRunner | null): ILiquidityProviderFeature;
  waitForDeployment(): Promise<this>;

  interface: ILiquidityProviderFeatureInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  sellToLiquidityProvider: TypedContractMethod<
    [
      inputToken: AddressLike,
      outputToken: AddressLike,
      provider: AddressLike,
      recipient: AddressLike,
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      auxiliaryData: BytesLike
    ],
    [bigint],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "sellToLiquidityProvider"
  ): TypedContractMethod<
    [
      inputToken: AddressLike,
      outputToken: AddressLike,
      provider: AddressLike,
      recipient: AddressLike,
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      auxiliaryData: BytesLike
    ],
    [bigint],
    "payable"
  >;

  getEvent(
    key: "LiquidityProviderSwap"
  ): TypedContractEvent<
    LiquidityProviderSwapEvent.InputTuple,
    LiquidityProviderSwapEvent.OutputTuple,
    LiquidityProviderSwapEvent.OutputObject
  >;

  filters: {
    "LiquidityProviderSwap(address,address,uint256,uint256,address,address)": TypedContractEvent<
      LiquidityProviderSwapEvent.InputTuple,
      LiquidityProviderSwapEvent.OutputTuple,
      LiquidityProviderSwapEvent.OutputObject
    >;
    LiquidityProviderSwap: TypedContractEvent<
      LiquidityProviderSwapEvent.InputTuple,
      LiquidityProviderSwapEvent.OutputTuple,
      LiquidityProviderSwapEvent.OutputObject
    >;
  };
}
