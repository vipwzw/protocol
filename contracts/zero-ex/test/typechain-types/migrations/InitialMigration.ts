/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace InitialMigration {
  export type BootstrapFeaturesStruct = {
    registry: AddressLike;
    ownable: AddressLike;
  };

  export type BootstrapFeaturesStructOutput = [
    registry: string,
    ownable: string
  ] & { registry: string; ownable: string };
}

export interface InitialMigrationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bootstrap"
      | "die"
      | "initializeCaller"
      | "initializeZeroEx"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bootstrap",
    values: [AddressLike, InitialMigration.BootstrapFeaturesStruct]
  ): string;
  encodeFunctionData(functionFragment: "die", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "initializeCaller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeZeroEx",
    values: [AddressLike, AddressLike, InitialMigration.BootstrapFeaturesStruct]
  ): string;

  decodeFunctionResult(functionFragment: "bootstrap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "die", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeZeroEx",
    data: BytesLike
  ): Result;
}

export interface InitialMigration extends BaseContract {
  connect(runner?: ContractRunner | null): InitialMigration;
  waitForDeployment(): Promise<this>;

  interface: InitialMigrationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bootstrap: TypedContractMethod<
    [owner: AddressLike, features: InitialMigration.BootstrapFeaturesStruct],
    [string],
    "nonpayable"
  >;

  die: TypedContractMethod<[ethRecipient: AddressLike], [void], "nonpayable">;

  initializeCaller: TypedContractMethod<[], [string], "view">;

  initializeZeroEx: TypedContractMethod<
    [
      owner: AddressLike,
      zeroEx: AddressLike,
      features: InitialMigration.BootstrapFeaturesStruct
    ],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bootstrap"
  ): TypedContractMethod<
    [owner: AddressLike, features: InitialMigration.BootstrapFeaturesStruct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "die"
  ): TypedContractMethod<[ethRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initializeCaller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initializeZeroEx"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      zeroEx: AddressLike,
      features: InitialMigration.BootstrapFeaturesStruct
    ],
    [string],
    "nonpayable"
  >;

  filters: {};
}
