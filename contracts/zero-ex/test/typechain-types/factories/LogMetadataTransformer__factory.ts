/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  LogMetadataTransformer,
  LogMetadataTransformerInterface,
} from "../LogMetadataTransformer";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "taker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "TransformerMetadata",
    type: "event",
  },
  {
    inputs: [],
    name: "deployer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "ethRecipient",
        type: "address",
      },
    ],
    name: "die",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address payable",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IERC20Transformer.TransformContext",
        name: "context",
        type: "tuple",
      },
    ],
    name: "transform",
    outputs: [
      {
        internalType: "bytes4",
        name: "success",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250503073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505060805160a0516107196100b3600039600081816101b801526102120152600081816101320152818161018c015261025701526107196000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063832b24bb14610046578063c9353cb514610076578063d5f3948814610092575b600080fd5b610060600480360381019061005b91906103e5565b6100b0565b60405161006d9190610469565b60405180910390f35b610090600480360381019061008b91906104e2565b610130565b005b61009a610255565b6040516100a79190610530565b60405180910390f35b60007fb93f056965e11f8e82e38e1cbcc633815755295e4a9afc067a8922c75867073c8260000160208101906100e691906104e2565b8360200160208101906100f991906104e2565b848060400190610109919061055a565b604051610119949392919061067a565b60405180910390a16313c9929e60e01b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101b6576101b56101b0337f0000000000000000000000000000000000000000000000000000000000000000610279565b610314565b5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461023c5761023b610236307f000000000000000000000000000000000000000000000000000000000000000061031c565b610314565b5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b7f000000000000000000000000000000000000000000000000000000000000000081565b60607f5cec653b364cca3880afa73ceff506d0651d11d26abbbe4a56460aa933b21b0883836040516024016102af9291906106ba565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b805160208201fd5b60607fb5cf2cd09307d6c717473134badbb9761c2c97d7565566c2a71eba6cd6fc514d83836040516024016103529291906106ba565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b600080fd5b600080fd5b600080fd5b6000606082840312156103dc576103db6103c1565b5b81905092915050565b6000602082840312156103fb576103fa6103b7565b5b600082013567ffffffffffffffff811115610419576104186103bc565b5b610425848285016103c6565b91505092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6104638161042e565b82525050565b600060208201905061047e600083018461045a565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104af82610484565b9050919050565b6104bf816104a4565b81146104ca57600080fd5b50565b6000813590506104dc816104b6565b92915050565b6000602082840312156104f8576104f76103b7565b5b6000610506848285016104cd565b91505092915050565b600061051a82610484565b9050919050565b61052a8161050f565b82525050565b60006020820190506105456000830184610521565b92915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126105775761057661054b565b5b80840192508235915067ffffffffffffffff82111561059957610598610550565b5b6020830192506001820236038313156105b5576105b4610555565b5b509250929050565b6000819050919050565b60006105e26105dd6105d884610484565b6105bd565b610484565b9050919050565b60006105f4826105c7565b9050919050565b6000610606826105e9565b9050919050565b610616816105fb565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610659838561061c565b935061066683858461062d565b61066f8361063c565b840190509392505050565b600060608201905061068f600083018761060d565b61069c602083018661060d565b81810360408301526106af81848661064d565b905095945050505050565b60006040820190506106cf6000830185610521565b6106dc6020830184610521565b939250505056fea26469706673582212203845554aae34b27257604301e716268dd85406b42bc24575f9b3a826bf284c7f64736f6c634300081c0033";

type LogMetadataTransformerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LogMetadataTransformerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LogMetadataTransformer__factory extends ContractFactory {
  constructor(...args: LogMetadataTransformerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      LogMetadataTransformer & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): LogMetadataTransformer__factory {
    return super.connect(runner) as LogMetadataTransformer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LogMetadataTransformerInterface {
    return new Interface(_abi) as LogMetadataTransformerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): LogMetadataTransformer {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as LogMetadataTransformer;
  }
}
