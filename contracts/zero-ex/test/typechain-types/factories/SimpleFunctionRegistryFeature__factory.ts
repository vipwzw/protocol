/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  SimpleFunctionRegistryFeature,
  SimpleFunctionRegistryFeatureInterface,
} from "../SimpleFunctionRegistryFeature";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        indexed: false,
        internalType: "address",
        name: "oldImpl",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newImpl",
        type: "address",
      },
    ],
    name: "ProxyFunctionUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "FEATURE_NAME",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "FEATURE_VERSION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        internalType: "address",
        name: "impl",
        type: "address",
      },
    ],
    name: "_extendSelf",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "bootstrap",
    outputs: [
      {
        internalType: "bytes4",
        name: "success",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        internalType: "address",
        name: "impl",
        type: "address",
      },
    ],
    name: "extend",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        internalType: "uint256",
        name: "idx",
        type: "uint256",
      },
    ],
    name: "getRollbackEntryAtIndex",
    outputs: [
      {
        internalType: "address",
        name: "impl",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "getRollbackLength",
    outputs: [
      {
        internalType: "uint256",
        name: "rollbackLength",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        internalType: "address",
        name: "targetImpl",
        type: "address",
      },
    ],
    name: "rollback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0604052610017600160008061006360201b60201c565b60a09081525034801561002957600080fd5b503073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505061008d565b60008163ffffffff1660208463ffffffff16901b60408663ffffffff16901b171790509392505050565b60805160a05161123c6100ce600039600061019d0152600081816107ff01528181610830015281816108610152818161089201526108c3015261123c6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80636eb224cb1161005b5780636eb224cb146101155780639db64a4014610131578063dfd007491461014d578063fb969b0a1461017d57610088565b8063031b905c1461008d5780630ee8be1b146100ab5780636ae4b4f7146100c75780636ba6bbc2146100e5575b600080fd5b61009561019b565b6040516100a29190610d70565b60405180910390f35b6100c560048036038101906100c09190610e46565b6101bf565b005b6100cf610212565b6040516100dc9190610f16565b60405180910390f35b6100ff60048036038101906100fa9190610f64565b61024b565b60405161010c9190610fb3565b60405180910390f35b61012f600480360381019061012a9190610e46565b6102ec565b005b61014b60048036038101906101469190610e46565b6103b4565b005b61016760048036038101906101629190610fce565b610789565b6040516101749190610d70565b60405180910390f35b6101856107f0565b604051610192919061100a565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610204576102036101fe336108f4565b61098c565b5b61020e8282610994565b5050565b6040518060400160405280601681526020017f53696d706c6546756e6374696f6e52656769737472790000000000000000000081525081565b6000610255610bc7565b6000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002082815481106102b9576102b8611025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b60003073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035d9190611069565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a5576103a461039f3383610bdd565b61098c565b5b506103b08282610994565b5050565b60003073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104259190611069565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461046d5761046c6104673383610bdd565b61098c565b5b50600080610479610c5f565b915091506000816000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361053057505050610785565b6000836000016000877bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002090506000818054905090505b6000811115610679576000826001836105aa91906110c5565b815481106105bb576105ba611025565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828054806105f9576105f86110f9565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106675750610679565b508061067290611128565b9050610591565b600081036106945761069361068e8888610c7a565b61098c565b5b85846000016000897bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f2ae221083467de52078b0096696ab88d8d53a7ecb44bb65b56a2bab6875983678488604051610777929190611151565b60405180910390a250505050505b5050565b6000610793610bc7565b6000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020805490509050919050565b6000610823636eb224cb60e01b7f0000000000000000000000000000000000000000000000000000000000000000610994565b610854630ee8be1b60e01b7f0000000000000000000000000000000000000000000000000000000000000000610994565b610885639db64a4060e01b7f0000000000000000000000000000000000000000000000000000000000000000610994565b6108b663dfd0074960e01b7f0000000000000000000000000000000000000000000000000000000000000000610994565b6108e7636ba6bbc260e01b7f0000000000000000000000000000000000000000000000000000000000000000610994565b63d150751b60e01b905090565b60607ff0ec779b0bcda6d84abf99ee2c67647d1100ebbb553a9c2d1c2ba1579592832c826040516024016109289190610fb3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b805160208201fd5b60008061099f610c5f565b915091506000816000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000836000016000877bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020905080829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084836000016000887bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f2ae221083467de52078b0096696ab88d8d53a7ecb44bb65b56a2bab6875983678387604051610bb7929190611151565b60405180910390a2505050505050565b600080610bd46001610d15565b90508091505090565b6060631de45ad160e01b8383604051602401610bfa929190611151565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b600080610c6a610bc7565b610c72610d41565b915091509091565b60607fa0425c2dc08feeb46e95a8e23b3c6d740f439b9610c5a973cad3b7eca6ccfe638383604051602401610cb092919061117a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b60006080600183600b811115610d2e57610d2d6111a3565b5b610d3891906111d2565b901b9050919050565b600080610d4e6000610d15565b90508091505090565b6000819050919050565b610d6a81610d57565b82525050565b6000602082019050610d856000830184610d61565b92915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610dc581610d90565b8114610dd057600080fd5b50565b600081359050610de281610dbc565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e1382610de8565b9050919050565b610e2381610e08565b8114610e2e57600080fd5b50565b600081359050610e4081610e1a565b92915050565b60008060408385031215610e5d57610e5c610d8b565b5b6000610e6b85828601610dd3565b9250506020610e7c85828601610e31565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ec0578082015181840152602081019050610ea5565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ee882610e86565b610ef28185610e91565b9350610f02818560208601610ea2565b610f0b81610ecc565b840191505092915050565b60006020820190508181036000830152610f308184610edd565b905092915050565b610f4181610d57565b8114610f4c57600080fd5b50565b600081359050610f5e81610f38565b92915050565b60008060408385031215610f7b57610f7a610d8b565b5b6000610f8985828601610dd3565b9250506020610f9a85828601610f4f565b9150509250929050565b610fad81610e08565b82525050565b6000602082019050610fc86000830184610fa4565b92915050565b600060208284031215610fe457610fe3610d8b565b5b6000610ff284828501610dd3565b91505092915050565b61100481610d90565b82525050565b600060208201905061101f6000830184610ffb565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151905061106381610e1a565b92915050565b60006020828403121561107f5761107e610d8b565b5b600061108d84828501611054565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110d082610d57565b91506110db83610d57565b92508282039050818111156110f3576110f2611096565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600061113382610d57565b91506000820361114657611145611096565b5b600182039050919050565b60006040820190506111666000830185610fa4565b6111736020830184610fa4565b9392505050565b600060408201905061118f6000830185610ffb565b61119c6020830184610fa4565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006111dd82610d57565b91506111e883610d57565b9250828201905080821115611200576111ff611096565b5b9291505056fea26469706673582212204929037f3f52cf95435b734b12ed7ea2146c30bb2c211eabf6a7725eac3870d864736f6c634300081c0033";

type SimpleFunctionRegistryFeatureConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleFunctionRegistryFeatureConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleFunctionRegistryFeature__factory extends ContractFactory {
  constructor(...args: SimpleFunctionRegistryFeatureConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SimpleFunctionRegistryFeature & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): SimpleFunctionRegistryFeature__factory {
    return super.connect(runner) as SimpleFunctionRegistryFeature__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleFunctionRegistryFeatureInterface {
    return new Interface(_abi) as SimpleFunctionRegistryFeatureInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SimpleFunctionRegistryFeature {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as SimpleFunctionRegistryFeature;
  }
}
