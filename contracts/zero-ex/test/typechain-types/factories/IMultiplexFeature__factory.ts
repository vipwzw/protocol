/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IMultiplexFeature,
  IMultiplexFeatureInterface,
} from "../IMultiplexFeature";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20Token",
            name: "inputToken",
            type: "address",
          },
          {
            internalType: "contract IERC20Token",
            name: "outputToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "sellAmount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "enum IMultiplexFeature.MultiplexSubcall",
                name: "id",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "sellAmount",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct IMultiplexFeature.BatchSellSubcall[]",
            name: "calls",
            type: "tuple[]",
          },
          {
            internalType: "bool",
            name: "useSelfBalance",
            type: "bool",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "address",
            name: "payer",
            type: "address",
          },
        ],
        internalType: "struct IMultiplexFeature.BatchSellParams",
        name: "params",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
    ],
    name: "_multiplexBatchSell",
    outputs: [
      {
        internalType: "uint256",
        name: "boughtAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "sellAmount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "enum IMultiplexFeature.MultiplexSubcall",
                name: "id",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct IMultiplexFeature.MultiHopSellSubcall[]",
            name: "calls",
            type: "tuple[]",
          },
          {
            internalType: "bool",
            name: "useSelfBalance",
            type: "bool",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "address",
            name: "payer",
            type: "address",
          },
        ],
        internalType: "struct IMultiplexFeature.MultiHopSellParams",
        name: "params",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
    ],
    name: "_multiplexMultiHopSell",
    outputs: [
      {
        internalType: "uint256",
        name: "boughtAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Token",
        name: "outputToken",
        type: "address",
      },
      {
        components: [
          {
            internalType: "enum IMultiplexFeature.MultiplexSubcall",
            name: "id",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "sellAmount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IMultiplexFeature.BatchSellSubcall[]",
        name: "calls",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
    ],
    name: "multiplexBatchSellEthForToken",
    outputs: [
      {
        internalType: "uint256",
        name: "boughtAmount",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Token",
        name: "inputToken",
        type: "address",
      },
      {
        components: [
          {
            internalType: "enum IMultiplexFeature.MultiplexSubcall",
            name: "id",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "sellAmount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IMultiplexFeature.BatchSellSubcall[]",
        name: "calls",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "sellAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
    ],
    name: "multiplexBatchSellTokenForEth",
    outputs: [
      {
        internalType: "uint256",
        name: "boughtAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Token",
        name: "inputToken",
        type: "address",
      },
      {
        internalType: "contract IERC20Token",
        name: "outputToken",
        type: "address",
      },
      {
        components: [
          {
            internalType: "enum IMultiplexFeature.MultiplexSubcall",
            name: "id",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "sellAmount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IMultiplexFeature.BatchSellSubcall[]",
        name: "calls",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "sellAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
    ],
    name: "multiplexBatchSellTokenForToken",
    outputs: [
      {
        internalType: "uint256",
        name: "boughtAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "enum IMultiplexFeature.MultiplexSubcall",
            name: "id",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IMultiplexFeature.MultiHopSellSubcall[]",
        name: "calls",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
    ],
    name: "multiplexMultiHopSellEthForToken",
    outputs: [
      {
        internalType: "uint256",
        name: "boughtAmount",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "enum IMultiplexFeature.MultiplexSubcall",
            name: "id",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IMultiplexFeature.MultiHopSellSubcall[]",
        name: "calls",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "sellAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
    ],
    name: "multiplexMultiHopSellTokenForEth",
    outputs: [
      {
        internalType: "uint256",
        name: "boughtAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "enum IMultiplexFeature.MultiplexSubcall",
            name: "id",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IMultiplexFeature.MultiHopSellSubcall[]",
        name: "calls",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "sellAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
    ],
    name: "multiplexMultiHopSellTokenForToken",
    outputs: [
      {
        internalType: "uint256",
        name: "boughtAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IMultiplexFeature__factory {
  static readonly abi = _abi;
  static createInterface(): IMultiplexFeatureInterface {
    return new Interface(_abi) as IMultiplexFeatureInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IMultiplexFeature {
    return new Contract(address, _abi, runner) as unknown as IMultiplexFeature;
  }
}
