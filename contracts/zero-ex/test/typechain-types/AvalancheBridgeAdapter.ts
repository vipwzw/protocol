/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IBridgeAdapter {
  export type BridgeOrderStruct = {
    source: BytesLike;
    takerTokenAmount: BigNumberish;
    makerTokenAmount: BigNumberish;
    bridgeData: BytesLike;
  };

  export type BridgeOrderStructOutput = [
    source: string,
    takerTokenAmount: bigint,
    makerTokenAmount: bigint,
    bridgeData: string
  ] & {
    source: string;
    takerTokenAmount: bigint;
    makerTokenAmount: bigint;
    bridgeData: string;
  };
}

export interface AvalancheBridgeAdapterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_tradeGMX"
      | "_tradePlatypus"
      | "_tradeWOOFi"
      | "isSupportedSource"
      | "trade"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "BridgeFill"): EventFragment;

  encodeFunctionData(
    functionFragment: "_tradeGMX",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_tradePlatypus",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_tradeWOOFi",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportedSource",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [
      IBridgeAdapter.BridgeOrderStruct,
      AddressLike,
      AddressLike,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "_tradeGMX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_tradePlatypus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_tradeWOOFi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupportedSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
}

export namespace BridgeFillEvent {
  export type InputTuple = [
    source: BytesLike,
    inputToken: AddressLike,
    outputToken: AddressLike,
    inputTokenAmount: BigNumberish,
    outputTokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    source: string,
    inputToken: string,
    outputToken: string,
    inputTokenAmount: bigint,
    outputTokenAmount: bigint
  ];
  export interface OutputObject {
    source: string;
    inputToken: string;
    outputToken: string;
    inputTokenAmount: bigint;
    outputTokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AvalancheBridgeAdapter extends BaseContract {
  connect(runner?: ContractRunner | null): AvalancheBridgeAdapter;
  waitForDeployment(): Promise<this>;

  interface: AvalancheBridgeAdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _tradeGMX: TypedContractMethod<
    [buyToken: AddressLike, sellAmount: BigNumberish, bridgeData: BytesLike],
    [bigint],
    "nonpayable"
  >;

  _tradePlatypus: TypedContractMethod<
    [buyToken: AddressLike, sellAmount: BigNumberish, bridgeData: BytesLike],
    [bigint],
    "nonpayable"
  >;

  _tradeWOOFi: TypedContractMethod<
    [
      sellToken: AddressLike,
      buyToken: AddressLike,
      sellAmount: BigNumberish,
      bridgeData: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  isSupportedSource: TypedContractMethod<
    [source: BytesLike],
    [boolean],
    "nonpayable"
  >;

  trade: TypedContractMethod<
    [
      order: IBridgeAdapter.BridgeOrderStruct,
      sellToken: AddressLike,
      buyToken: AddressLike,
      sellAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_tradeGMX"
  ): TypedContractMethod<
    [buyToken: AddressLike, sellAmount: BigNumberish, bridgeData: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_tradePlatypus"
  ): TypedContractMethod<
    [buyToken: AddressLike, sellAmount: BigNumberish, bridgeData: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_tradeWOOFi"
  ): TypedContractMethod<
    [
      sellToken: AddressLike,
      buyToken: AddressLike,
      sellAmount: BigNumberish,
      bridgeData: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isSupportedSource"
  ): TypedContractMethod<[source: BytesLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "trade"
  ): TypedContractMethod<
    [
      order: IBridgeAdapter.BridgeOrderStruct,
      sellToken: AddressLike,
      buyToken: AddressLike,
      sellAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "BridgeFill"
  ): TypedContractEvent<
    BridgeFillEvent.InputTuple,
    BridgeFillEvent.OutputTuple,
    BridgeFillEvent.OutputObject
  >;

  filters: {
    "BridgeFill(bytes32,address,address,uint256,uint256)": TypedContractEvent<
      BridgeFillEvent.InputTuple,
      BridgeFillEvent.OutputTuple,
      BridgeFillEvent.OutputObject
    >;
    BridgeFill: TypedContractEvent<
      BridgeFillEvent.InputTuple,
      BridgeFillEvent.OutputTuple,
      BridgeFillEvent.OutputObject
    >;
  };
}
