/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ISimpleFunctionRegistryFeatureInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "extend"
      | "getRollbackEntryAtIndex"
      | "getRollbackLength"
      | "rollback"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ProxyFunctionUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "extend",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRollbackEntryAtIndex",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRollbackLength",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rollback",
    values: [BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "extend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRollbackEntryAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRollbackLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rollback", data: BytesLike): Result;
}

export namespace ProxyFunctionUpdatedEvent {
  export type InputTuple = [
    selector: BytesLike,
    oldImpl: AddressLike,
    newImpl: AddressLike
  ];
  export type OutputTuple = [
    selector: string,
    oldImpl: string,
    newImpl: string
  ];
  export interface OutputObject {
    selector: string;
    oldImpl: string;
    newImpl: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISimpleFunctionRegistryFeature extends BaseContract {
  connect(runner?: ContractRunner | null): ISimpleFunctionRegistryFeature;
  waitForDeployment(): Promise<this>;

  interface: ISimpleFunctionRegistryFeatureInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  extend: TypedContractMethod<
    [selector: BytesLike, impl: AddressLike],
    [void],
    "nonpayable"
  >;

  getRollbackEntryAtIndex: TypedContractMethod<
    [selector: BytesLike, idx: BigNumberish],
    [string],
    "view"
  >;

  getRollbackLength: TypedContractMethod<
    [selector: BytesLike],
    [bigint],
    "view"
  >;

  rollback: TypedContractMethod<
    [selector: BytesLike, targetImpl: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "extend"
  ): TypedContractMethod<
    [selector: BytesLike, impl: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRollbackEntryAtIndex"
  ): TypedContractMethod<
    [selector: BytesLike, idx: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRollbackLength"
  ): TypedContractMethod<[selector: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rollback"
  ): TypedContractMethod<
    [selector: BytesLike, targetImpl: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ProxyFunctionUpdated"
  ): TypedContractEvent<
    ProxyFunctionUpdatedEvent.InputTuple,
    ProxyFunctionUpdatedEvent.OutputTuple,
    ProxyFunctionUpdatedEvent.OutputObject
  >;

  filters: {
    "ProxyFunctionUpdated(bytes4,address,address)": TypedContractEvent<
      ProxyFunctionUpdatedEvent.InputTuple,
      ProxyFunctionUpdatedEvent.OutputTuple,
      ProxyFunctionUpdatedEvent.OutputObject
    >;
    ProxyFunctionUpdated: TypedContractEvent<
      ProxyFunctionUpdatedEvent.InputTuple,
      ProxyFunctionUpdatedEvent.OutputTuple,
      ProxyFunctionUpdatedEvent.OutputObject
    >;
  };
}
