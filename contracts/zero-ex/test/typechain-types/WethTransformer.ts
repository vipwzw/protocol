/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IERC20Transformer {
  export type TransformContextStruct = {
    sender: AddressLike;
    recipient: AddressLike;
    data: BytesLike;
  };

  export type TransformContextStructOutput = [
    sender: string,
    recipient: string,
    data: string
  ] & { sender: string; recipient: string; data: string };
}

export interface WethTransformerInterface extends Interface {
  getFunction(
    nameOrSignature: "deployer" | "die" | "transform" | "weth"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(functionFragment: "die", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "transform",
    values: [IERC20Transformer.TransformContextStruct]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "die", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transform", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
}

export interface WethTransformer extends BaseContract {
  connect(runner?: ContractRunner | null): WethTransformer;
  waitForDeployment(): Promise<this>;

  interface: WethTransformerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deployer: TypedContractMethod<[], [string], "view">;

  die: TypedContractMethod<[ethRecipient: AddressLike], [void], "nonpayable">;

  transform: TypedContractMethod<
    [context: IERC20Transformer.TransformContextStruct],
    [string],
    "nonpayable"
  >;

  weth: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deployer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "die"
  ): TypedContractMethod<[ethRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transform"
  ): TypedContractMethod<
    [context: IERC20Transformer.TransformContextStruct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
