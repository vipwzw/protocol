/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace LibNativeOrder {
  export type LimitOrderStruct = {
    makerToken: AddressLike;
    takerToken: AddressLike;
    makerAmount: BigNumberish;
    takerAmount: BigNumberish;
    takerTokenFeeAmount: BigNumberish;
    maker: AddressLike;
    taker: AddressLike;
    sender: AddressLike;
    feeRecipient: AddressLike;
    pool: BytesLike;
    expiry: BigNumberish;
    salt: BigNumberish;
  };

  export type LimitOrderStructOutput = [
    makerToken: string,
    takerToken: string,
    makerAmount: bigint,
    takerAmount: bigint,
    takerTokenFeeAmount: bigint,
    maker: string,
    taker: string,
    sender: string,
    feeRecipient: string,
    pool: string,
    expiry: bigint,
    salt: bigint
  ] & {
    makerToken: string;
    takerToken: string;
    makerAmount: bigint;
    takerAmount: bigint;
    takerTokenFeeAmount: bigint;
    maker: string;
    taker: string;
    sender: string;
    feeRecipient: string;
    pool: string;
    expiry: bigint;
    salt: bigint;
  };

  export type RfqOrderStruct = {
    makerToken: AddressLike;
    takerToken: AddressLike;
    makerAmount: BigNumberish;
    takerAmount: BigNumberish;
    maker: AddressLike;
    taker: AddressLike;
    txOrigin: AddressLike;
    pool: BytesLike;
    expiry: BigNumberish;
    salt: BigNumberish;
  };

  export type RfqOrderStructOutput = [
    makerToken: string,
    takerToken: string,
    makerAmount: bigint,
    takerAmount: bigint,
    maker: string,
    taker: string,
    txOrigin: string,
    pool: string,
    expiry: bigint,
    salt: bigint
  ] & {
    makerToken: string;
    takerToken: string;
    makerAmount: bigint;
    takerAmount: bigint;
    maker: string;
    taker: string;
    txOrigin: string;
    pool: string;
    expiry: bigint;
    salt: bigint;
  };
}

export declare namespace LibSignature {
  export type SignatureStruct = {
    signatureType: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type SignatureStructOutput = [
    signatureType: bigint,
    v: bigint,
    r: string,
    s: string
  ] & { signatureType: bigint; v: bigint; r: string; s: string };
}

export interface IBatchFillNativeOrdersFeatureInterface extends Interface {
  getFunction(
    nameOrSignature: "batchFillLimitOrders" | "batchFillRfqOrders"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchFillLimitOrders",
    values: [
      LibNativeOrder.LimitOrderStruct[],
      LibSignature.SignatureStruct[],
      BigNumberish[],
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchFillRfqOrders",
    values: [
      LibNativeOrder.RfqOrderStruct[],
      LibSignature.SignatureStruct[],
      BigNumberish[],
      boolean
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchFillLimitOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchFillRfqOrders",
    data: BytesLike
  ): Result;
}

export interface IBatchFillNativeOrdersFeature extends BaseContract {
  connect(runner?: ContractRunner | null): IBatchFillNativeOrdersFeature;
  waitForDeployment(): Promise<this>;

  interface: IBatchFillNativeOrdersFeatureInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchFillLimitOrders: TypedContractMethod<
    [
      orders: LibNativeOrder.LimitOrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      takerTokenFillAmounts: BigNumberish[],
      revertIfIncomplete: boolean
    ],
    [
      [bigint[], bigint[]] & {
        takerTokenFilledAmounts: bigint[];
        makerTokenFilledAmounts: bigint[];
      }
    ],
    "payable"
  >;

  batchFillRfqOrders: TypedContractMethod<
    [
      orders: LibNativeOrder.RfqOrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      takerTokenFillAmounts: BigNumberish[],
      revertIfIncomplete: boolean
    ],
    [
      [bigint[], bigint[]] & {
        takerTokenFilledAmounts: bigint[];
        makerTokenFilledAmounts: bigint[];
      }
    ],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchFillLimitOrders"
  ): TypedContractMethod<
    [
      orders: LibNativeOrder.LimitOrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      takerTokenFillAmounts: BigNumberish[],
      revertIfIncomplete: boolean
    ],
    [
      [bigint[], bigint[]] & {
        takerTokenFilledAmounts: bigint[];
        makerTokenFilledAmounts: bigint[];
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "batchFillRfqOrders"
  ): TypedContractMethod<
    [
      orders: LibNativeOrder.RfqOrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      takerTokenFillAmounts: BigNumberish[],
      revertIfIncomplete: boolean
    ],
    [
      [bigint[], bigint[]] & {
        takerTokenFilledAmounts: bigint[];
        makerTokenFilledAmounts: bigint[];
      }
    ],
    "nonpayable"
  >;

  filters: {};
}
