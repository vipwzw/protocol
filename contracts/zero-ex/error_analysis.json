{
    "UNCLASSIFIED_ERRORS": [
        ["1", "successfully fills multiple orders"],
        ["2", "can call NativeOrders.fillLimitOrder()"],
        ["3", "can call NativeOrders.fillRfqOrder()"],
        ["4", "can call `TransformERC20.transformERC20()`"],
        ["5", "can call `TransformERC20.transformERC20()` with calldata"],
        ["6", "can call with any sender if `sender == 0`"],
        ["7", "works without fee"],
        ["8", "fails with unsupported function"],
        ["9", "cannot execute the same mtx twice"],
        ["10", "fails if not enough ETH provided"],
        ["11", "fails if signature is wrong"],
        ["12", "cannot reenter `executeMetaTransaction()`"],
        ["13", "cannot reenter `batchExecuteMetaTransactions()`"],
        ["14", "cannot reduce initial ETH balance"],
        ["15", "can execute multiple transactions"],
        ["16", "cannot execute the same transaction twice"],
        ["17", "fails if a meta-transaction fails"],
        ["18", "cannot reenter `executeMetaTransaction()`"],
        ["19", "cannot reenter `batchExecuteMetaTransactions()`"],
        ["20", "cannot reduce initial ETH balance"],
        ["21", "returns the block it was executed in"],
        ["22", "returns the block it was executed in"],
        ["23", "reverts if minBuyAmount is not satisfied"],
        ["24", "reverts if the full sell amount is not sold"],
        ["25", "RFQ, fallback(UniswapV2)"],
        ["26", "OTC, fallback(UniswapV2)"],
        ["27", "expired RFQ, fallback(UniswapV2)"],
        ["28", "expired OTC, fallback(UniswapV2)"],
        ["29", "expired RFQ, fallback(TransformERC20)"],
        ["30", "LiquidityProvider, UniV3, Sushiswap"],
        ["31", "proportional fill amounts"],
        ["32", "RFQ, MultiHop(UniV3, UniV2)"],
        ["33", "RFQ"],
        ["34", "OTC"],
        ["35", "LiquidityProvider"],
        ["36", "TransformERC20"],
        ["37", "RFQ"],
        ["38", "OTC"],
        ["39", "LiquidityProvider"],
        ["40", "TransformERC20"],
        ["41", "RFQ, MultiHop(UniV3, UniV2)"],
        ["42", "UniswapV2 -> LiquidityProvider"],
        ["43", "LiquidityProvider -> Sushiswap"],
        ["44", "UniswapV3 -> BatchSell(RFQ, UniswapV2)"],
        ["45", "BatchSell(RFQ, UniswapV2) -> UniswapV3"],
        ["46", "UniswapV2 -> LiquidityProvider"],
        ["47", "LiquidityProvider -> Sushiswap"],
        ["48", "UniswapV2 -> LiquidityProvider"],
        ["49", "LiquidityProvider -> Sushiswap"],
        ["50", "UniswapV3 -> BatchSell(RFQ, UniswapV2)"],
        ["51", "BatchSell(RFQ, UniswapV2) -> UniswapV3"],
        ["52", "returns the last nonce used in a bucket"],
        ["53", "unfilled order"],
        ["54", "filled order"],
        ["55", "can fully fill an order"],
        ["56", "can partially fill an order"],
        ["57", "clamps fill amount to remaining available"],
        ["58", "cannot fill an order with wrong tx.origin"],
        ["59", "cannot fill an order with wrong taker"],
        ["60", "can fill an order from a different tx.origin if registered"],
        ["61", "cannot fill an order with registered then unregistered tx.origin"],
        ["62", "cannot fill an order with a zero tx.origin"],
        ["63", "cannot fill an expired order"],
        ["64", "cannot fill order with bad signature"],
        ["65", "cannot fill the same order twice"],
        ["66", "cannot fill two orders with the same nonceBucket and nonce"],
        ["67", "cannot fill an order whose nonce is less than the nonce last used in that bucket"],
        ["68", "can fill two orders that use the same nonce bucket and increasing nonces"],
        ["69", "can fill two orders that use the same nonce but different nonce buckets"],
        ["70", "can fill a WETH buy order and receive ETH"],
        ["71", "allows for fills on orders signed by a approved signer"],
        ["72", "disallows fills if the signer is revoked"],
        ["73", "doesn't allow fills with an unapproved signer"],
        ["74", "Can fill an order with ETH (takerToken=WETH)"],
        ["75", "Can fill an order with ETH (takerToken=ETH)"],
        ["76", "Can partially fill an order with ETH (takerToken=WETH)"],
        ["77", "Can partially fill an order with ETH (takerToken=ETH)"],
        ["78", "Can refund excess ETH is msg.value > order.takerAmount (takerToken=WETH)"],
        ["79", "Can refund excess ETH is msg.value > order.takerAmount (takerToken=ETH)"],
        ["80", "can fully fill an order"],
        ["81", "cannot fill an order with wrong tx.origin"],
        ["82", "can fill an order from a different tx.origin if registered"],
        ["83", "cannot fill an order with registered then unregistered tx.origin"],
        ["84", "cannot fill an order with a zero tx.origin"],
        ["85", "cannot fill an expired order"],
        ["86", "cannot fill an order with bad taker signature"],
        ["87", "cannot fill order with bad maker signature"],
        ["88", "cannot fill the same orderÂ twice"],
        ["89", "cannot fill two orders with the same nonceBucket and nonce"],
        ["90", "cannot fill an order whose nonce is less than the nonce last used in that bucket"],
        ["91", "can fill two orders that use the same nonce bucket and increasing nonces"],
        ["92", "can fill two orders that use the same nonce but different nonce buckets"],
        ["93", "can fill a WETH buy order and receive ETH"],
        ["94", "`rollback()` to non-zero impl reverts for unregistered function"],
        ["95", "owner can zero a function with `extend()`"],
        ["96", "owner can rollback a function to zero"],
        ["97", "owner cannot rollback a function to a version not in history"],
        ["98", "non-owner cannot set the transformer deployer with `setTransformerDeployer()`"],
        ["99", "non-owner cannot set the quote signer with `setQuoteSigner()`"],
        ["100", "succeeds if taker's output token balance increases by exactly minOutputTokenAmount"],
        ["101", "succeeds if taker's output token balance increases by exactly minOutputTokenAmount, with ETH"],
        ["102", "succeeds if taker's output token balance increases by more than minOutputTokenAmount"],
        ["103", "throws if taker's output token balance increases by less than minOutputTokenAmount"],
        ["104", "throws if taker's output token balance decreases"],
        ["105", "can call multiple transformers"],
        ["106", "fails with invalid transformer nonce"],
        ["107", "can sell entire taker balance"],
        ["108", "can sell entire taker balance with ETH (but not really)"],
        ["109", "can partial sell to a single limit order"],
        ["110", "can partially sell to one of each order type"],
        ["26", "MultiplexFeature"],
        ["28", "MultiplexFeature"],
        ["34", "MultiplexFeature"],
        ["36", "MultiplexFeature"],
        ["38", "MultiplexFeature"],
        ["40", "MultiplexFeature"]
    ],
    "VALUE_ASSERTION_ERRORS": [
        ["1", "ERC1155OrdersFeature"],
        ["53", "OtcOrdersFeature"]
    ],
    "META_TRANSACTION_ERRORS": [
        ["2", "MetaTransactions feature"],
        ["3", "MetaTransactions feature"],
        ["4", "MetaTransactions feature"],
        ["5", "MetaTransactions feature"],
        ["6", "MetaTransactions feature"],
        ["7", "MetaTransactions feature"],
        ["9", "MetaTransactions feature"],
        ["15", "MetaTransactions feature"],
        ["16", "MetaTransactions feature"],
        ["21", "MetaTransactions feature"],
        ["22", "MetaTransactions feature"]
    ],
    "ERROR_ENCODING_MISMATCH": [
        ["8", "MetaTransactions feature"],
        ["10", "MetaTransactions feature"]
    ],
    "DATA_BOUNDS_ERRORS": [
        ["11", "MetaTransactions feature"],
        ["12", "MetaTransactions feature"],
        ["13", "MetaTransactions feature"],
        ["17", "MetaTransactions feature"],
        ["18", "MetaTransactions feature"],
        ["19", "MetaTransactions feature"]
    ],
    "REVERT_ASSERTION_ERRORS": [
        ["14", "MetaTransactions feature"],
        ["20", "MetaTransactions feature"],
        ["23", "MultiplexFeature"],
        ["24", "MultiplexFeature"],
        ["58", "OtcOrdersFeature"],
        ["59", "OtcOrdersFeature"],
        ["62", "OtcOrdersFeature"],
        ["63", "OtcOrdersFeature"],
        ["73", "OtcOrdersFeature"],
        ["81", "OtcOrdersFeature"],
        ["84", "OtcOrdersFeature"],
        ["85", "OtcOrdersFeature"],
        ["86", "OtcOrdersFeature"]
    ],
    "TRANSACTION_REVERTS": [
        ["25", "MultiplexFeature"],
        ["27", "MultiplexFeature"],
        ["29", "MultiplexFeature"],
        ["31", "MultiplexFeature"],
        ["32", "MultiplexFeature"],
        ["33", "MultiplexFeature"],
        ["37", "MultiplexFeature"],
        ["41", "MultiplexFeature"],
        ["44", "MultiplexFeature"],
        ["45", "MultiplexFeature"],
        ["50", "MultiplexFeature"],
        ["51", "MultiplexFeature"],
        ["60", "OtcOrdersFeature"],
        ["61", "OtcOrdersFeature"],
        ["82", "OtcOrdersFeature"],
        ["83", "OtcOrdersFeature"]
    ],
    "ABI_ENCODING_ERRORS": [
        ["30", "MultiplexFeature"],
        ["35", "MultiplexFeature"],
        ["39", "MultiplexFeature"],
        ["42", "MultiplexFeature"],
        ["43", "MultiplexFeature"],
        ["46", "MultiplexFeature"],
        ["47", "MultiplexFeature"],
        ["48", "MultiplexFeature"],
        ["49", "MultiplexFeature"]
    ],
    "ONLY_SELF_ERRORS": [
        ["52", "OtcOrdersFeature"],
        ["54", "OtcOrdersFeature"],
        ["55", "OtcOrdersFeature"],
        ["56", "OtcOrdersFeature"],
        ["57", "OtcOrdersFeature"],
        ["65", "OtcOrdersFeature"],
        ["66", "OtcOrdersFeature"],
        ["67", "OtcOrdersFeature"],
        ["68", "OtcOrdersFeature"],
        ["69", "OtcOrdersFeature"],
        ["70", "OtcOrdersFeature"],
        ["74", "OtcOrdersFeature"],
        ["75", "OtcOrdersFeature"],
        ["76", "OtcOrdersFeature"],
        ["77", "OtcOrdersFeature"],
        ["78", "OtcOrdersFeature"],
        ["79", "OtcOrdersFeature"],
        ["80", "OtcOrdersFeature"],
        ["88", "OtcOrdersFeature"],
        ["89", "OtcOrdersFeature"],
        ["90", "OtcOrdersFeature"],
        ["91", "OtcOrdersFeature"],
        ["92", "OtcOrdersFeature"],
        ["93", "OtcOrdersFeature"]
    ],
    "PARAMETER_MISSING_ERRORS": [
        ["64", "OtcOrdersFeature"],
        ["87", "OtcOrdersFeature"]
    ],
    "FUNCTION_NOT_FOUND_ERRORS": [
        ["71", "OtcOrdersFeature"],
        ["72", "OtcOrdersFeature"]
    ]
}
