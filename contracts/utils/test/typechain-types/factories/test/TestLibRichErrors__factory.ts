/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  TestLibRichErrors,
  TestLibRichErrorsInterface,
} from "../../test/TestLibRichErrors";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "errorData",
        type: "bytes",
      },
    ],
    name: "externalRRevert",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506101978061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063226404b514610030575b600080fd5b61004a60048036038101906100459190610114565b61004c565b005b61009982828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061009d565b5050565b805160208201fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126100d4576100d36100af565b5b8235905067ffffffffffffffff8111156100f1576100f06100b4565b5b60208301915083600182028301111561010d5761010c6100b9565b5b9250929050565b6000806020838503121561012b5761012a6100a5565b5b600083013567ffffffffffffffff811115610149576101486100aa565b5b610155858286016100be565b9250925050925092905056fea264697066735822122044f6d913d492408504848382cc8cdf4748d054bf52e079c35180dfac39a366ca64736f6c634300081c0033";

type TestLibRichErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestLibRichErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestLibRichErrors__factory extends ContractFactory {
  constructor(...args: TestLibRichErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestLibRichErrors & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestLibRichErrors__factory {
    return super.connect(runner) as TestLibRichErrors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestLibRichErrorsInterface {
    return new Interface(_abi) as TestLibRichErrorsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestLibRichErrors {
    return new Contract(address, _abi, runner) as unknown as TestLibRichErrors;
  }
}
