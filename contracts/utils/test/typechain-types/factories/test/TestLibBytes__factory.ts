/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  TestLibBytes,
  TestLibBytesInterface,
} from "../../test/TestLibBytes";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "b",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "tempLength",
        type: "uint256",
      },
    ],
    name: "assertBytesUnchangedAfterLengthReset",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "lhs",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhs",
        type: "bytes",
      },
    ],
    name: "publicEquals",
    outputs: [
      {
        internalType: "bool",
        name: "equal",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "lhs",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "rhs",
        type: "bytes",
      },
    ],
    name: "publicEqualsPop1",
    outputs: [
      {
        internalType: "bool",
        name: "equal",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "b",
        type: "bytes",
      },
    ],
    name: "publicPopLastByte",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bytes1",
        name: "result",
        type: "bytes1",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "b",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "publicReadAddress",
    outputs: [
      {
        internalType: "address",
        name: "result",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "b",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "publicReadBytes32",
    outputs: [
      {
        internalType: "bytes32",
        name: "result",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "b",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "publicReadBytes4",
    outputs: [
      {
        internalType: "bytes4",
        name: "result",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "b",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "publicReadUint256",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "b",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "from",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "to",
        type: "uint256",
      },
    ],
    name: "publicSlice",
    outputs: [
      {
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "original",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "b",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "from",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "to",
        type: "uint256",
      },
    ],
    name: "publicSliceDestructive",
    outputs: [
      {
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "original",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "b",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "input",
        type: "address",
      },
    ],
    name: "publicWriteAddress",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "b",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "input",
        type: "bytes32",
      },
    ],
    name: "publicWriteBytes32",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "b",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "extraBytes",
        type: "bytes",
      },
    ],
    name: "publicWriteLength",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "b",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "input",
        type: "uint256",
      },
    ],
    name: "publicWriteUint256",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "mem",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "dest",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "source",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "testMemcpy",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506114fa8061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80639d19cb5e11610097578063c4b0f38b11610066578063c4b0f38b146102f8578063cc12cb2814610329578063e3a85ce414610359578063f06f300d14610389576100f5565b80639d19cb5e14610237578063b1840e8d14610268578063b79650a414610298578063be766f1b146102c8576100f5565b806367aa05c2116100d357806367aa05c21461017757806378bbae9b146101a757806382e2fa24146101d757806384f8775814610207576100f5565b80630301d5e1146100fa5780633f2a25ec1461012b5780634bcb91d21461015b575b600080fd5b610114600480360381019061010f9190610c92565b6103b9565b604051610122929190610d95565b60405180910390f35b61014560048036038101906101409190610e59565b6103d0565b6040516101529190610ec8565b60405180910390f35b61017560048036038101906101709190610eea565b6103f1565b005b610191600480360381019061018c9190610f46565b61045d565b60405161019e9190610ec8565b60405180910390f35b6101c160048036038101906101bc9190610fd1565b6104aa565b6040516101ce9190610ec8565b60405180910390f35b6101f160048036038101906101ec9190610eea565b610518565b6040516101fe9190611063565b60405180910390f35b610221600480360381019061021c91906110b4565b610535565b60405161022e9190610ec8565b60405180910390f35b610251600480360381019061024c9190611123565b610556565b60405161025f929190611192565b60405180910390f35b610282600480360381019061027d91906111c9565b610574565b60405161028f919061125c565b60405180910390f35b6102b260048036038101906102ad9190611123565b6105a5565b6040516102bf9190610ec8565b60405180910390f35b6102e260048036038101906102dd9190610eea565b6105c6565b6040516102ef9190611286565b60405180910390f35b610312600480360381019061030d9190611123565b6105e3565b604051610320929190611192565b60405180910390f35b610343600480360381019061033e9190610eea565b610601565b60405161035091906112dc565b60405180910390f35b610373600480360381019061036e9190610eea565b61061e565b6040516103809190611306565b60405180910390f35b6103a3600480360381019061039e91906111c9565b61063b565b6040516103b0919061125c565b60405180910390f35b606060006103c683610658565b9050829150915091565b60606103e78383866106b49092919063ffffffff16565b8390509392505050565b600082519050600061040f600083866107469092919063ffffffff16565b9050610424838561080c90919063ffffffff16565b610437828561080c90919063ffffffff16565b61044a818561081390919063ffffffff16565b61045757610456611321565b5b50505050565b60606000845161046c8661082e565b610476919061137f565b905061048c816104858561082e565b855161083b565b61049f848661080c90919063ffffffff16565b849150509392505050565b6060845182846104ba919061137f565b11156104c557600080fd5b845182856104d3919061137f565b11156104de57600080fd5b60006104e98661082e565b905061050c85826104fa919061137f565b8583610506919061137f565b8561083b565b85915050949350505050565b600061052d82846108e690919063ffffffff16565b905092915050565b606061054c83838661093a9092919063ffffffff16565b8390509392505050565b606080610564858585610746565b9150818591509150935093915050565b600061057f83610658565b5061058982610658565b5061059d828461081390919063ffffffff16565b905092915050565b60606105bc83838661098a9092919063ffffffff16565b8390509392505050565b60006105db828461099d90919063ffffffff16565b905092915050565b6060806105f18585856109f1565b9150818591509150935093915050565b60006106168284610a4090919063ffffffff16565b905092915050565b60006106338284610a9490919063ffffffff16565b905092915050565b6000610650828461081390919063ffffffff16565b905092915050565b60008082510361067957610678610673600284516000610aab565b610b30565b5b816001835161068891906113b3565b81518110610699576106986113e7565b5b602001015160f81c60f81b9050600182510380835250919050565b6014826106c1919061137f565b835110156106eb576106ea6106e5600485516014866106e0919061137f565b610aab565b610b30565b5b6014826106f8919061137f565b91507fffffffffffffffffffffffff0000000000000000000000000000000000000000828401511673ffffffffffffffffffffffffffffffffffffffff821691508082188385015250505050565b6060818311156107655761076461075f60008585610aab565b610b30565b5b83518211156107845761078361077e6001848751610aab565b610b30565b5b828261079091906113b3565b67ffffffffffffffff8111156107a9576107a8610b67565b5b6040519080825280601f01601f1916602001820160405280156107db5781602001600182028036833780820191505090505b5090506108056107ea8261082e565b846107f48761082e565b6107fe919061137f565b835161083b565b9392505050565b8082525050565b60008180519060200120838051906020012014905092915050565b6000602082019050919050565b6020811015610865576001816020036101000a0380198351168185511680821786525050506108e0565b828203156108e157828211156108ac5760208103905080820181840181515b828510156108a15784518652602085019450602086019550610884565b8082525050506108df565b60208103905080820181840183515b818612156108d857825182526020830392506020820391506108bb565b8086525050505b5b5b505050565b60006014826108f5919061137f565b8351101561091f5761091e61091960048551601486610914919061137f565b610aab565b610b30565b5b60148261092c919061137f565b915081830151905092915050565b602082610947919061137f565b835110156109715761097061096b60058551602086610966919061137f565b610aab565b610b30565b5b60208261097e919061137f565b91508082840152505050565b61099883838360001b61093a565b505050565b60006020826109ac919061137f565b835110156109d6576109d56109d0600585516020866109cb919061137f565b610aab565b610b30565b5b6020826109e3919061137f565b915081830151905092915050565b606081831115610a1057610a0f610a0a60008585610aab565b610b30565b5b8351821115610a2f57610a2e610a296001848751610aab565b610b30565b5b828401905082820381529392505050565b6000600482610a4f919061137f565b83511015610a7957610a78610a7360038551600486610a6e919061137f565b610aab565b610b30565b5b602082610a86919061137f565b915081830151905092915050565b6000610aa0838361099d565b60001c905092915050565b6060632800659560e01b848484604051602401610aca9392919061148d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b805160208201fd5b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b9f82610b56565b810181811067ffffffffffffffff82111715610bbe57610bbd610b67565b5b80604052505050565b6000610bd1610b38565b9050610bdd8282610b96565b919050565b600067ffffffffffffffff821115610bfd57610bfc610b67565b5b610c0682610b56565b9050602081019050919050565b82818337600083830152505050565b6000610c35610c3084610be2565b610bc7565b905082815260208101848484011115610c5157610c50610b51565b5b610c5c848285610c13565b509392505050565b600082601f830112610c7957610c78610b4c565b5b8135610c89848260208601610c22565b91505092915050565b600060208284031215610ca857610ca7610b42565b5b600082013567ffffffffffffffff811115610cc657610cc5610b47565b5b610cd284828501610c64565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d15578082015181840152602081019050610cfa565b60008484015250505050565b6000610d2c82610cdb565b610d368185610ce6565b9350610d46818560208601610cf7565b610d4f81610b56565b840191505092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b610d8f81610d5a565b82525050565b60006040820190508181036000830152610daf8185610d21565b9050610dbe6020830184610d86565b9392505050565b6000819050919050565b610dd881610dc5565b8114610de357600080fd5b50565b600081359050610df581610dcf565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e2682610dfb565b9050919050565b610e3681610e1b565b8114610e4157600080fd5b50565b600081359050610e5381610e2d565b92915050565b600080600060608486031215610e7257610e71610b42565b5b600084013567ffffffffffffffff811115610e9057610e8f610b47565b5b610e9c86828701610c64565b9350506020610ead86828701610de6565b9250506040610ebe86828701610e44565b9150509250925092565b60006020820190508181036000830152610ee28184610d21565b905092915050565b60008060408385031215610f0157610f00610b42565b5b600083013567ffffffffffffffff811115610f1f57610f1e610b47565b5b610f2b85828601610c64565b9250506020610f3c85828601610de6565b9150509250929050565b600080600060608486031215610f5f57610f5e610b42565b5b600084013567ffffffffffffffff811115610f7d57610f7c610b47565b5b610f8986828701610c64565b9350506020610f9a86828701610de6565b925050604084013567ffffffffffffffff811115610fbb57610fba610b47565b5b610fc786828701610c64565b9150509250925092565b60008060008060808587031215610feb57610fea610b42565b5b600085013567ffffffffffffffff81111561100957611008610b47565b5b61101587828801610c64565b945050602061102687828801610de6565b935050604061103787828801610de6565b925050606061104887828801610de6565b91505092959194509250565b61105d81610e1b565b82525050565b60006020820190506110786000830184611054565b92915050565b6000819050919050565b6110918161107e565b811461109c57600080fd5b50565b6000813590506110ae81611088565b92915050565b6000806000606084860312156110cd576110cc610b42565b5b600084013567ffffffffffffffff8111156110eb576110ea610b47565b5b6110f786828701610c64565b935050602061110886828701610de6565b92505060406111198682870161109f565b9150509250925092565b60008060006060848603121561113c5761113b610b42565b5b600084013567ffffffffffffffff81111561115a57611159610b47565b5b61116686828701610c64565b935050602061117786828701610de6565b925050604061118886828701610de6565b9150509250925092565b600060408201905081810360008301526111ac8185610d21565b905081810360208301526111c08184610d21565b90509392505050565b600080604083850312156111e0576111df610b42565b5b600083013567ffffffffffffffff8111156111fe576111fd610b47565b5b61120a85828601610c64565b925050602083013567ffffffffffffffff81111561122b5761122a610b47565b5b61123785828601610c64565b9150509250929050565b60008115159050919050565b61125681611241565b82525050565b6000602082019050611271600083018461124d565b92915050565b6112808161107e565b82525050565b600060208201905061129b6000830184611277565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6112d6816112a1565b82525050565b60006020820190506112f160008301846112cd565b92915050565b61130081610dc5565b82525050565b600060208201905061131b60008301846112f7565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061138a82610dc5565b915061139583610dc5565b92508282019050808211156113ad576113ac611350565b5b92915050565b60006113be82610dc5565b91506113c983610dc5565b92508282039050818111156113e1576113e0611350565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6008811061145657611455611416565b5b50565b600081905061146782611445565b919050565b600061147782611459565b9050919050565b6114878161146c565b82525050565b60006060820190506114a2600083018661147e565b6114af60208301856112f7565b6114bc60408301846112f7565b94935050505056fea2646970667358221220a28d49fa6efca225ee9e85ffb86068eee97b2a2440ac199d48297e1776ac026164736f6c634300081c0033";

type TestLibBytesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestLibBytesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestLibBytes__factory extends ContractFactory {
  constructor(...args: TestLibBytesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestLibBytes & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestLibBytes__factory {
    return super.connect(runner) as TestLibBytes__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestLibBytesInterface {
    return new Interface(_abi) as TestLibBytesInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestLibBytes {
    return new Contract(address, _abi, runner) as unknown as TestLibBytes;
  }
}
