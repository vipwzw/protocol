/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TestLibBytesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "assertBytesUnchangedAfterLengthReset"
      | "publicEquals"
      | "publicEqualsPop1"
      | "publicPopLastByte"
      | "publicReadAddress"
      | "publicReadBytes32"
      | "publicReadBytes4"
      | "publicReadUint256"
      | "publicSlice"
      | "publicSliceDestructive"
      | "publicWriteAddress"
      | "publicWriteBytes32"
      | "publicWriteLength"
      | "publicWriteUint256"
      | "testMemcpy"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assertBytesUnchangedAfterLengthReset",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicEquals",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "publicEqualsPop1",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "publicPopLastByte",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "publicReadAddress",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicReadBytes32",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicReadBytes4",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicReadUint256",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicSlice",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicSliceDestructive",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicWriteAddress",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "publicWriteBytes32",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "publicWriteLength",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "publicWriteUint256",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testMemcpy",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "assertBytesUnchangedAfterLengthReset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicEquals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicEqualsPop1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicPopLastByte",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicReadAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicReadBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicReadBytes4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicReadUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSlice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSliceDestructive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicWriteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicWriteBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicWriteLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicWriteUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testMemcpy", data: BytesLike): Result;
}

export interface TestLibBytes extends BaseContract {
  connect(runner?: ContractRunner | null): TestLibBytes;
  waitForDeployment(): Promise<this>;

  interface: TestLibBytesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assertBytesUnchangedAfterLengthReset: TypedContractMethod<
    [b: BytesLike, tempLength: BigNumberish],
    [void],
    "view"
  >;

  publicEquals: TypedContractMethod<
    [lhs: BytesLike, rhs: BytesLike],
    [boolean],
    "view"
  >;

  publicEqualsPop1: TypedContractMethod<
    [lhs: BytesLike, rhs: BytesLike],
    [boolean],
    "view"
  >;

  publicPopLastByte: TypedContractMethod<
    [b: BytesLike],
    [[string, string] & { result: string }],
    "view"
  >;

  publicReadAddress: TypedContractMethod<
    [b: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;

  publicReadBytes32: TypedContractMethod<
    [b: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;

  publicReadBytes4: TypedContractMethod<
    [b: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;

  publicReadUint256: TypedContractMethod<
    [b: BytesLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  publicSlice: TypedContractMethod<
    [b: BytesLike, from: BigNumberish, to: BigNumberish],
    [[string, string] & { result: string; original: string }],
    "view"
  >;

  publicSliceDestructive: TypedContractMethod<
    [b: BytesLike, from: BigNumberish, to: BigNumberish],
    [[string, string] & { result: string; original: string }],
    "view"
  >;

  publicWriteAddress: TypedContractMethod<
    [b: BytesLike, index: BigNumberish, input: AddressLike],
    [string],
    "view"
  >;

  publicWriteBytes32: TypedContractMethod<
    [b: BytesLike, index: BigNumberish, input: BytesLike],
    [string],
    "view"
  >;

  publicWriteLength: TypedContractMethod<
    [b: BytesLike, length: BigNumberish, extraBytes: BytesLike],
    [string],
    "view"
  >;

  publicWriteUint256: TypedContractMethod<
    [b: BytesLike, index: BigNumberish, input: BigNumberish],
    [string],
    "view"
  >;

  testMemcpy: TypedContractMethod<
    [
      mem: BytesLike,
      dest: BigNumberish,
      source: BigNumberish,
      length: BigNumberish
    ],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "assertBytesUnchangedAfterLengthReset"
  ): TypedContractMethod<
    [b: BytesLike, tempLength: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "publicEquals"
  ): TypedContractMethod<[lhs: BytesLike, rhs: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "publicEqualsPop1"
  ): TypedContractMethod<[lhs: BytesLike, rhs: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "publicPopLastByte"
  ): TypedContractMethod<
    [b: BytesLike],
    [[string, string] & { result: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "publicReadAddress"
  ): TypedContractMethod<[b: BytesLike, index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "publicReadBytes32"
  ): TypedContractMethod<[b: BytesLike, index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "publicReadBytes4"
  ): TypedContractMethod<[b: BytesLike, index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "publicReadUint256"
  ): TypedContractMethod<[b: BytesLike, index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "publicSlice"
  ): TypedContractMethod<
    [b: BytesLike, from: BigNumberish, to: BigNumberish],
    [[string, string] & { result: string; original: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "publicSliceDestructive"
  ): TypedContractMethod<
    [b: BytesLike, from: BigNumberish, to: BigNumberish],
    [[string, string] & { result: string; original: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "publicWriteAddress"
  ): TypedContractMethod<
    [b: BytesLike, index: BigNumberish, input: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "publicWriteBytes32"
  ): TypedContractMethod<
    [b: BytesLike, index: BigNumberish, input: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "publicWriteLength"
  ): TypedContractMethod<
    [b: BytesLike, length: BigNumberish, extraBytes: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "publicWriteUint256"
  ): TypedContractMethod<
    [b: BytesLike, index: BigNumberish, input: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "testMemcpy"
  ): TypedContractMethod<
    [
      mem: BytesLike,
      dest: BigNumberish,
      source: BigNumberish,
      length: BigNumberish
    ],
    [string],
    "view"
  >;

  filters: {};
}
