name: Improved Continuous Integration

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  FOUNDRY_PROFILE: ci

jobs:
  setup:
    name: Setup and Cache
    runs-on: ubuntu-latest
    outputs:
      yarn-cache-dir: ${{ steps.yarn-cache-dir-path.outputs.dir }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache yarn dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Lint TypeScript
        run: yarn lint:ts

      - name: Lint Solidity
        run: yarn lint:contracts

      - name: Check Prettier formatting
        run: yarn prettier:ci

  build-typescript:
    name: Build TypeScript Packages
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Build TypeScript packages
        run: yarn build

  test-contracts-foundry:
    name: Test Contracts with Foundry
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        contract: [erc20, governance, zero-ex]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Add Foundry to PATH
        run: echo "$HOME/.foundry/bin" >> $GITHUB_PATH

      - name: Verify Foundry installation
        run: |
          which forge || echo "forge not in PATH"
          which cast || echo "cast not in PATH" 
          which anvil || echo "anvil not in PATH"
          forge --version
          cast --version
          anvil --version

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Run Forge build for ${{ matrix.contract }}
        working-directory: contracts/${{ matrix.contract }}
        run: |
          forge --version
          forge build --sizes

      - name: Run Forge tests for ${{ matrix.contract }}
        working-directory: contracts/${{ matrix.contract }}
        run: |
          forge test -vvv --gas-report

      - name: Generate coverage report for ${{ matrix.contract }}
        working-directory: contracts/${{ matrix.contract }}
        run: |
          forge coverage --report summary --report lcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./contracts/${{ matrix.contract }}/lcov.info
          flags: ${{ matrix.contract }}
          name: ${{ matrix.contract }}-coverage
          fail_ci_if_error: false

  test-typescript:
    name: Test TypeScript Packages
    runs-on: ubuntu-latest
    needs: [setup, build-typescript]
    strategy:
      matrix:
        package:
          - '@0x/contracts-test-utils'
          - '@0x/contract-addresses'
          - '@0x/contract-artifacts'
          - '@0x/contract-wrappers'
          - '@0x/protocol-utils'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Test ${{ matrix.package }}
        run: yarn wsrun -p "${{ matrix.package }}" -c test:ci

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Run yarn audit
        run: yarn audit --level moderate
        continue-on-error: true

      - name: Install Slither
        run: pip3 install slither-analyzer

      - name: Run Slither analysis on governance contracts
        working-directory: contracts/governance
        run: slither src/ --exclude-dependencies
        continue-on-error: true

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-contracts-foundry, test-typescript]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Run integration tests
        run: yarn test:integration
        continue-on-error: true

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, build-typescript, test-contracts-foundry, test-typescript, security-audit]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Lint and Format: ${{ needs.lint-and-format.result }}"
          echo "Build TypeScript: ${{ needs.build-typescript.result }}"
          echo "Test Contracts: ${{ needs.test-contracts-foundry.result }}"
          echo "Test TypeScript: ${{ needs.test-typescript.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          
          if [[ "${{ needs.lint-and-format.result }}" == "failure" || 
                "${{ needs.build-typescript.result }}" == "failure" || 
                "${{ needs.test-contracts-foundry.result }}" == "failure" || 
                "${{ needs.test-typescript.result }}" == "failure" ]]; then
            echo "❌ CI failed"
            exit 1
          else
            echo "✅ CI passed"
          fi 
