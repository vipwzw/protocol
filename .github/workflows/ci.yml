name: Continuous Integration

on:
  push:
    branches:
      - main
      - development
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '24'
  YARN_CACHE_FOLDER: ~/.yarn
  FORGE_VERSION: 'stable'

jobs:
  setup:
    name: Setup and cache dependencies
    runs-on: ubuntu-latest
    outputs:
      node-cache-hit: ${{ steps.node-cache.outputs.cache-hit }}
      forge-cache-hit: ${{ steps.forge-cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Cache node modules
        id: node-cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
            contracts/*/node_modules
            ~/.yarn
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Setup workspaces
        run: yarn setup:workspaces

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: ${{ env.FORGE_VERSION }}

      - name: Cache Foundry
        id: forge-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.foundry
            contracts/*/cache
            contracts/*/out
          key: ${{ runner.os }}-foundry-${{ env.FORGE_VERSION }}-${{ hashFiles('contracts/**/foundry.toml', 'contracts/**/*.sol') }}
          restore-keys: |
            ${{ runner.os }}-foundry-${{ env.FORGE_VERSION }}-

  build:
    name: Build project
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
            contracts/*/node_modules
            ~/.yarn
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: needs.setup.outputs.node-cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Setup workspaces
        run: yarn setup:workspaces

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: ${{ env.FORGE_VERSION }}

      - name: Restore Foundry cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.foundry
            contracts/*/cache
            contracts/*/out
          key: ${{ runner.os }}-foundry-${{ env.FORGE_VERSION }}-${{ hashFiles('contracts/**/foundry.toml', 'contracts/**/*.sol') }}

      - name: Build solution
        run: yarn build

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            packages/*/lib
            contracts/*/lib
            contracts/*/generated-*
          key: ${{ runner.os }}-build-${{ github.sha }}

  lint:
    name: Lint and format check
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
            contracts/*/node_modules
            ~/.yarn
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: needs.setup.outputs.node-cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Setup workspaces
        run: yarn setup:workspaces

      - name: Lint code
        run: yarn lint

      - name: Check Prettier formatting
        run: yarn prettier:ci

  quality-checks:
    name: Quality checks
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
            contracts/*/node_modules
            ~/.yarn
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: needs.setup.outputs.node-cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Check docs diff
        run: yarn diff_md_docs:ci

      - name: Check for broken links
        run: yarn test:links

      - name: Test doc generation
        run: yarn test:generate_docs:ci

  test-contracts:
    name: Test smart contracts
    runs-on: ubuntu-latest
    needs: [setup, build]
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
            contracts/*/node_modules
            ~/.yarn
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: needs.setup.outputs.node-cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Setup workspaces
        run: yarn setup:workspaces

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: ${{ env.FORGE_VERSION }}

      - name: Restore Foundry cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.foundry
            contracts/*/cache
            contracts/*/out
          key: ${{ runner.os }}-foundry-${{ env.FORGE_VERSION }}-${{ hashFiles('contracts/**/foundry.toml', 'contracts/**/*.sol') }}

      - name: Restore build artifacts cache
        uses: actions/cache@v4
        with:
          path: |
            packages/*/lib
            contracts/*/lib
            contracts/*/generated-*
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Test @0x/contracts-*
        run: |
          yarn wsrun \
            -p @0x/contracts-utils \
            -p @0x/contracts-exchange-libs \
            -p @0x/contracts-erc721 \
            -p @0x/contracts-erc1155 \
            -p @0x/contracts-erc20 \
            -p @0x/contracts-asset-proxy \
            -p @0x/contracts-staking \
            -p @0x/contracts-treasury \
            -p @0x/contracts-governance \
            -p @0x/contracts-zero-ex \
            -m --serial -c test:ci

  test-packages:
    name: Test local packages
    runs-on: ubuntu-latest
    needs: [setup, build]
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
            contracts/*/node_modules
            ~/.yarn
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: needs.setup.outputs.node-cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Setup workspaces
        run: yarn setup:workspaces

      - name: Restore build artifacts cache
        uses: actions/cache@v4
        with:
          path: |
            packages/*/lib
            contracts/*/lib
            contracts/*/generated-*
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Test local @0x/contracts-*
        run: |
          yarn wsrun \
            -p @0x/contracts-test-utils \
            -p @0x/contract-addresses \
            -p @0x/contract-artifacts \
            -p @0x/contract-wrappers-test \
            -p @0x/order-utils \
            -m --serial -c test:ci

  forge-tests:
    name: Forge tests
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 25
    strategy:
      matrix:
        contract: [asset-proxy, erc20, erc721, erc1155, exchange-libs, governance, staking, treasury, utils, zero-ex]
      fail-fast: false
    env:
      ARBITRUM_RPC_URL: ${{ secrets.ARBITRUM_RPC_URL }}
      AVALANCHE_RPC_URL: ${{ secrets.AVALANCHE_RPC_URL }}
      BSC_RPC_URL: ${{ secrets.BSC_RPC_URL }}
      FANTOM_RPC_URL: ${{ secrets.FANTOM_RPC_URL }}
      MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
      OPTIMISM_RPC_URL: ${{ secrets.OPTIMISM_RPC_URL }}
      POLYGON_RPC_URL: ${{ secrets.POLYGON_RPC_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: ${{ env.FORGE_VERSION }}

      - name: Restore Foundry cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.foundry
            contracts/*/cache
            contracts/*/out
          key: ${{ runner.os }}-foundry-${{ env.FORGE_VERSION }}-${{ hashFiles('contracts/**/foundry.toml', 'contracts/**/*.sol') }}

      - name: Run Forge build for ${{ matrix.contract }}
        working-directory: contracts/${{ matrix.contract }}
        run: |
          forge --version
          forge build --sizes

      - name: Run Forge tests for ${{ matrix.contract }}
        working-directory: contracts/${{ matrix.contract }}
        run: |
          forge test -vvv --gas-report

      - name: Run Forge coverage for ${{ matrix.contract }}
        working-directory: contracts/${{ matrix.contract }}
        run: |
          forge coverage --report summary --report lcov

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          base-path: ./contracts/${{ matrix.contract }}/
          path-to-lcov: ./contracts/${{ matrix.contract }}/lcov.info
          flag-name: forge-${{ matrix.contract }}
          parallel: true

  coverage-check:
    name: Coverage threshold check
    runs-on: ubuntu-latest
    needs: forge-tests
    if: always()
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: ${{ env.FORGE_VERSION }}

      - name: Generate coverage for zero-ex
        working-directory: contracts/zero-ex
        run: |
          forge coverage --report lcov

      - name: Check coverage threshold
        uses: VeryGoodOpenSource/very_good_coverage@v3
        with:
          path: ./contracts/zero-ex/lcov.info
          min_coverage: 6.98
          exclude: '**/tests'

  finish-coverage:
    name: Finish coverage reporting
    runs-on: ubuntu-latest
    needs: forge-tests
    if: always()
    steps:
      - name: Coveralls finished
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true

  final-check:
    name: All checks passed
    runs-on: ubuntu-latest
    needs: [build, lint, quality-checks, test-contracts, test-packages, forge-tests, coverage-check]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.build.result }}" != "success" || \
                "${{ needs.lint.result }}" != "success" || \
                "${{ needs.quality-checks.result }}" != "success" || \
                "${{ needs.test-contracts.result }}" != "success" || \
                "${{ needs.test-packages.result }}" != "success" || \
                "${{ needs.forge-tests.result }}" != "success" || \
                "${{ needs.coverage-check.result }}" != "success" ]]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "All jobs completed successfully"
