/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IStaking {
  export type StoredBalanceStruct = {
    currentEpoch: BigNumberish;
    currentEpochBalance: BigNumberish;
    nextEpochBalance: BigNumberish;
  };

  export type StoredBalanceStructOutput = [
    currentEpoch: bigint,
    currentEpochBalance: bigint,
    nextEpochBalance: bigint
  ] & {
    currentEpoch: bigint;
    currentEpochBalance: bigint;
    nextEpochBalance: bigint;
  };

  export type PoolStruct = {
    operator: AddressLike;
    operatorShare: BigNumberish;
  };

  export type PoolStructOutput = [operator: string, operatorShare: bigint] & {
    operator: string;
    operatorShare: bigint;
  };
}

export interface TreasuryStakingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_EPOCH_DURATION"
      | "PPM_DENOMINATOR"
      | "advanceEpoch"
      | "createStakingPool"
      | "currentEpoch"
      | "currentEpochStartTime"
      | "currentEpochStartTimeInSeconds"
      | "epochDurationInSeconds"
      | "forceAdvanceEpoch"
      | "getGlobalStakeByStatus"
      | "getOwnerStakeByStatus"
      | "getPoolsByOperator"
      | "getStakeDelegatedToPoolByOwner"
      | "getStakersByPool"
      | "getStakingPool"
      | "getTotalStakeDelegatedToPool"
      | "getTotalStakedByOwner"
      | "moveStakeFromPool"
      | "moveStakeToPool"
      | "nextPoolId"
      | "poolsOwnedByOperator"
      | "setEpochDuration"
      | "stake"
      | "stakersByPool"
      | "totalStakedByOwner"
      | "unstake"
      | "zrxToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EpochAdvanced"
      | "Stake"
      | "StakeDelegated"
      | "StakeUndelegated"
      | "StakingPoolCreated"
      | "Unstake"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_EPOCH_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PPM_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "advanceEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createStakingPool",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpochStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpochStartTimeInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochDurationInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceAdvanceEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalStakeByStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerStakeByStatus",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolsByOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeDelegatedToPoolByOwner",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakersByPool",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingPool",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStakeDelegatedToPool",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStakedByOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "moveStakeFromPool",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "moveStakeToPool",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextPoolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolsOwnedByOperator",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEpochDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakersByPool",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedByOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "zrxToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_EPOCH_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PPM_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advanceEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStakingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpochStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpochStartTimeInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochDurationInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceAdvanceEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalStakeByStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerStakeByStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolsByOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeDelegatedToPoolByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakersByPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStakeDelegatedToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStakedByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveStakeFromPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveStakeToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextPoolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolsOwnedByOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEpochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakersByPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zrxToken", data: BytesLike): Result;
}

export namespace EpochAdvancedEvent {
  export type InputTuple = [newEpoch: BigNumberish, startTime: BigNumberish];
  export type OutputTuple = [newEpoch: bigint, startTime: bigint];
  export interface OutputObject {
    newEpoch: bigint;
    startTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeEvent {
  export type InputTuple = [staker: AddressLike, amount: BigNumberish];
  export type OutputTuple = [staker: string, amount: bigint];
  export interface OutputObject {
    staker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeDelegatedEvent {
  export type InputTuple = [
    staker: AddressLike,
    poolId: BytesLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [staker: string, poolId: string, amount: bigint];
  export interface OutputObject {
    staker: string;
    poolId: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeUndelegatedEvent {
  export type InputTuple = [
    staker: AddressLike,
    poolId: BytesLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [staker: string, poolId: string, amount: bigint];
  export interface OutputObject {
    staker: string;
    poolId: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakingPoolCreatedEvent {
  export type InputTuple = [
    poolId: BytesLike,
    operator: AddressLike,
    operatorShare: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    operator: string,
    operatorShare: bigint
  ];
  export interface OutputObject {
    poolId: string;
    operator: string;
    operatorShare: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakeEvent {
  export type InputTuple = [staker: AddressLike, amount: BigNumberish];
  export type OutputTuple = [staker: string, amount: bigint];
  export interface OutputObject {
    staker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TreasuryStaking extends BaseContract {
  connect(runner?: ContractRunner | null): TreasuryStaking;
  waitForDeployment(): Promise<this>;

  interface: TreasuryStakingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_EPOCH_DURATION: TypedContractMethod<[], [bigint], "view">;

  PPM_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  advanceEpoch: TypedContractMethod<[], [void], "nonpayable">;

  createStakingPool: TypedContractMethod<
    [operatorShare: BigNumberish, addOperatorAsMaker: boolean],
    [string],
    "nonpayable"
  >;

  currentEpoch: TypedContractMethod<[], [bigint], "view">;

  currentEpochStartTime: TypedContractMethod<[], [bigint], "view">;

  currentEpochStartTimeInSeconds: TypedContractMethod<[], [bigint], "view">;

  epochDurationInSeconds: TypedContractMethod<[], [bigint], "view">;

  forceAdvanceEpoch: TypedContractMethod<[], [void], "nonpayable">;

  getGlobalStakeByStatus: TypedContractMethod<
    [stakeStatus: BigNumberish],
    [IStaking.StoredBalanceStructOutput],
    "view"
  >;

  getOwnerStakeByStatus: TypedContractMethod<
    [staker: AddressLike, stakeStatus: BigNumberish],
    [IStaking.StoredBalanceStructOutput],
    "view"
  >;

  getPoolsByOperator: TypedContractMethod<
    [operator: AddressLike],
    [string[]],
    "view"
  >;

  getStakeDelegatedToPoolByOwner: TypedContractMethod<
    [staker: AddressLike, poolId: BytesLike],
    [IStaking.StoredBalanceStructOutput],
    "view"
  >;

  getStakersByPool: TypedContractMethod<
    [poolId: BytesLike],
    [string[]],
    "view"
  >;

  getStakingPool: TypedContractMethod<
    [poolId: BytesLike],
    [IStaking.PoolStructOutput],
    "view"
  >;

  getTotalStakeDelegatedToPool: TypedContractMethod<
    [poolId: BytesLike],
    [IStaking.StoredBalanceStructOutput],
    "view"
  >;

  getTotalStakedByOwner: TypedContractMethod<
    [staker: AddressLike],
    [bigint],
    "view"
  >;

  moveStakeFromPool: TypedContractMethod<
    [poolId: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  moveStakeToPool: TypedContractMethod<
    [poolId: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  nextPoolId: TypedContractMethod<[], [bigint], "view">;

  poolsOwnedByOperator: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  setEpochDuration: TypedContractMethod<
    [_epochDurationInSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  stakersByPool: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  totalStakedByOwner: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  unstake: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  zrxToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_EPOCH_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PPM_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "advanceEpoch"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createStakingPool"
  ): TypedContractMethod<
    [operatorShare: BigNumberish, addOperatorAsMaker: boolean],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentEpochStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentEpochStartTimeInSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochDurationInSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "forceAdvanceEpoch"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getGlobalStakeByStatus"
  ): TypedContractMethod<
    [stakeStatus: BigNumberish],
    [IStaking.StoredBalanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwnerStakeByStatus"
  ): TypedContractMethod<
    [staker: AddressLike, stakeStatus: BigNumberish],
    [IStaking.StoredBalanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolsByOperator"
  ): TypedContractMethod<[operator: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getStakeDelegatedToPoolByOwner"
  ): TypedContractMethod<
    [staker: AddressLike, poolId: BytesLike],
    [IStaking.StoredBalanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStakersByPool"
  ): TypedContractMethod<[poolId: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getStakingPool"
  ): TypedContractMethod<
    [poolId: BytesLike],
    [IStaking.PoolStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalStakeDelegatedToPool"
  ): TypedContractMethod<
    [poolId: BytesLike],
    [IStaking.StoredBalanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalStakedByOwner"
  ): TypedContractMethod<[staker: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "moveStakeFromPool"
  ): TypedContractMethod<
    [poolId: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "moveStakeToPool"
  ): TypedContractMethod<
    [poolId: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nextPoolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "poolsOwnedByOperator"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "setEpochDuration"
  ): TypedContractMethod<
    [_epochDurationInSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakersByPool"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalStakedByOwner"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "zrxToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "EpochAdvanced"
  ): TypedContractEvent<
    EpochAdvancedEvent.InputTuple,
    EpochAdvancedEvent.OutputTuple,
    EpochAdvancedEvent.OutputObject
  >;
  getEvent(
    key: "Stake"
  ): TypedContractEvent<
    StakeEvent.InputTuple,
    StakeEvent.OutputTuple,
    StakeEvent.OutputObject
  >;
  getEvent(
    key: "StakeDelegated"
  ): TypedContractEvent<
    StakeDelegatedEvent.InputTuple,
    StakeDelegatedEvent.OutputTuple,
    StakeDelegatedEvent.OutputObject
  >;
  getEvent(
    key: "StakeUndelegated"
  ): TypedContractEvent<
    StakeUndelegatedEvent.InputTuple,
    StakeUndelegatedEvent.OutputTuple,
    StakeUndelegatedEvent.OutputObject
  >;
  getEvent(
    key: "StakingPoolCreated"
  ): TypedContractEvent<
    StakingPoolCreatedEvent.InputTuple,
    StakingPoolCreatedEvent.OutputTuple,
    StakingPoolCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Unstake"
  ): TypedContractEvent<
    UnstakeEvent.InputTuple,
    UnstakeEvent.OutputTuple,
    UnstakeEvent.OutputObject
  >;

  filters: {
    "EpochAdvanced(uint256,uint256)": TypedContractEvent<
      EpochAdvancedEvent.InputTuple,
      EpochAdvancedEvent.OutputTuple,
      EpochAdvancedEvent.OutputObject
    >;
    EpochAdvanced: TypedContractEvent<
      EpochAdvancedEvent.InputTuple,
      EpochAdvancedEvent.OutputTuple,
      EpochAdvancedEvent.OutputObject
    >;

    "Stake(address,uint256)": TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;
    Stake: TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;

    "StakeDelegated(address,bytes32,uint256)": TypedContractEvent<
      StakeDelegatedEvent.InputTuple,
      StakeDelegatedEvent.OutputTuple,
      StakeDelegatedEvent.OutputObject
    >;
    StakeDelegated: TypedContractEvent<
      StakeDelegatedEvent.InputTuple,
      StakeDelegatedEvent.OutputTuple,
      StakeDelegatedEvent.OutputObject
    >;

    "StakeUndelegated(address,bytes32,uint256)": TypedContractEvent<
      StakeUndelegatedEvent.InputTuple,
      StakeUndelegatedEvent.OutputTuple,
      StakeUndelegatedEvent.OutputObject
    >;
    StakeUndelegated: TypedContractEvent<
      StakeUndelegatedEvent.InputTuple,
      StakeUndelegatedEvent.OutputTuple,
      StakeUndelegatedEvent.OutputObject
    >;

    "StakingPoolCreated(bytes32,address,uint32)": TypedContractEvent<
      StakingPoolCreatedEvent.InputTuple,
      StakingPoolCreatedEvent.OutputTuple,
      StakingPoolCreatedEvent.OutputObject
    >;
    StakingPoolCreated: TypedContractEvent<
      StakingPoolCreatedEvent.InputTuple,
      StakingPoolCreatedEvent.OutputTuple,
      StakingPoolCreatedEvent.OutputObject
    >;

    "Unstake(address,uint256)": TypedContractEvent<
      UnstakeEvent.InputTuple,
      UnstakeEvent.OutputTuple,
      UnstakeEvent.OutputObject
    >;
    Unstake: TypedContractEvent<
      UnstakeEvent.InputTuple,
      UnstakeEvent.OutputTuple,
      UnstakeEvent.OutputObject
    >;
  };
}
