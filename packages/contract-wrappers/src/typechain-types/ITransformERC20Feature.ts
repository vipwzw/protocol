/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ITransformERC20Feature {
  export type TransformationStruct = {
    deploymentNonce: BigNumberish;
    data: BytesLike;
  };

  export type TransformationStructOutput = [
    deploymentNonce: bigint,
    data: string
  ] & { deploymentNonce: bigint; data: string };

  export type TransformERC20ArgsStruct = {
    taker: AddressLike;
    inputToken: AddressLike;
    outputToken: AddressLike;
    inputTokenAmount: BigNumberish;
    minOutputTokenAmount: BigNumberish;
    transformations: ITransformERC20Feature.TransformationStruct[];
    useSelfBalance: boolean;
    recipient: AddressLike;
  };

  export type TransformERC20ArgsStructOutput = [
    taker: string,
    inputToken: string,
    outputToken: string,
    inputTokenAmount: bigint,
    minOutputTokenAmount: bigint,
    transformations: ITransformERC20Feature.TransformationStructOutput[],
    useSelfBalance: boolean,
    recipient: string
  ] & {
    taker: string;
    inputToken: string;
    outputToken: string;
    inputTokenAmount: bigint;
    minOutputTokenAmount: bigint;
    transformations: ITransformERC20Feature.TransformationStructOutput[];
    useSelfBalance: boolean;
    recipient: string;
  };
}

export interface ITransformERC20FeatureInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_transformERC20"
      | "createTransformWallet"
      | "getQuoteSigner"
      | "getTransformWallet"
      | "getTransformerDeployer"
      | "setQuoteSigner"
      | "setTransformerDeployer"
      | "transformERC20"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "QuoteSignerUpdated"
      | "TransformedERC20"
      | "TransformerDeployerUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_transformERC20",
    values: [ITransformERC20Feature.TransformERC20ArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createTransformWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransformWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransformerDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setQuoteSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransformerDeployer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transformERC20",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      ITransformERC20Feature.TransformationStruct[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "_transformERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTransformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransformerDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuoteSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransformerDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transformERC20",
    data: BytesLike
  ): Result;
}

export namespace QuoteSignerUpdatedEvent {
  export type InputTuple = [quoteSigner: AddressLike];
  export type OutputTuple = [quoteSigner: string];
  export interface OutputObject {
    quoteSigner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransformedERC20Event {
  export type InputTuple = [
    taker: AddressLike,
    inputToken: AddressLike,
    outputToken: AddressLike,
    inputTokenAmount: BigNumberish,
    outputTokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    taker: string,
    inputToken: string,
    outputToken: string,
    inputTokenAmount: bigint,
    outputTokenAmount: bigint
  ];
  export interface OutputObject {
    taker: string;
    inputToken: string;
    outputToken: string;
    inputTokenAmount: bigint;
    outputTokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransformerDeployerUpdatedEvent {
  export type InputTuple = [transformerDeployer: AddressLike];
  export type OutputTuple = [transformerDeployer: string];
  export interface OutputObject {
    transformerDeployer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ITransformERC20Feature extends BaseContract {
  connect(runner?: ContractRunner | null): ITransformERC20Feature;
  waitForDeployment(): Promise<this>;

  interface: ITransformERC20FeatureInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _transformERC20: TypedContractMethod<
    [args: ITransformERC20Feature.TransformERC20ArgsStruct],
    [bigint],
    "payable"
  >;

  createTransformWallet: TypedContractMethod<[], [string], "nonpayable">;

  getQuoteSigner: TypedContractMethod<[], [string], "view">;

  getTransformWallet: TypedContractMethod<[], [string], "view">;

  getTransformerDeployer: TypedContractMethod<[], [string], "view">;

  setQuoteSigner: TypedContractMethod<
    [quoteSigner: AddressLike],
    [void],
    "nonpayable"
  >;

  setTransformerDeployer: TypedContractMethod<
    [transformerDeployer: AddressLike],
    [void],
    "nonpayable"
  >;

  transformERC20: TypedContractMethod<
    [
      inputToken: AddressLike,
      outputToken: AddressLike,
      inputTokenAmount: BigNumberish,
      minOutputTokenAmount: BigNumberish,
      transformations: ITransformERC20Feature.TransformationStruct[]
    ],
    [bigint],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_transformERC20"
  ): TypedContractMethod<
    [args: ITransformERC20Feature.TransformERC20ArgsStruct],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createTransformWallet"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getQuoteSigner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTransformWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTransformerDeployer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setQuoteSigner"
  ): TypedContractMethod<[quoteSigner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTransformerDeployer"
  ): TypedContractMethod<
    [transformerDeployer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transformERC20"
  ): TypedContractMethod<
    [
      inputToken: AddressLike,
      outputToken: AddressLike,
      inputTokenAmount: BigNumberish,
      minOutputTokenAmount: BigNumberish,
      transformations: ITransformERC20Feature.TransformationStruct[]
    ],
    [bigint],
    "payable"
  >;

  getEvent(
    key: "QuoteSignerUpdated"
  ): TypedContractEvent<
    QuoteSignerUpdatedEvent.InputTuple,
    QuoteSignerUpdatedEvent.OutputTuple,
    QuoteSignerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TransformedERC20"
  ): TypedContractEvent<
    TransformedERC20Event.InputTuple,
    TransformedERC20Event.OutputTuple,
    TransformedERC20Event.OutputObject
  >;
  getEvent(
    key: "TransformerDeployerUpdated"
  ): TypedContractEvent<
    TransformerDeployerUpdatedEvent.InputTuple,
    TransformerDeployerUpdatedEvent.OutputTuple,
    TransformerDeployerUpdatedEvent.OutputObject
  >;

  filters: {
    "QuoteSignerUpdated(address)": TypedContractEvent<
      QuoteSignerUpdatedEvent.InputTuple,
      QuoteSignerUpdatedEvent.OutputTuple,
      QuoteSignerUpdatedEvent.OutputObject
    >;
    QuoteSignerUpdated: TypedContractEvent<
      QuoteSignerUpdatedEvent.InputTuple,
      QuoteSignerUpdatedEvent.OutputTuple,
      QuoteSignerUpdatedEvent.OutputObject
    >;

    "TransformedERC20(address,address,address,uint256,uint256)": TypedContractEvent<
      TransformedERC20Event.InputTuple,
      TransformedERC20Event.OutputTuple,
      TransformedERC20Event.OutputObject
    >;
    TransformedERC20: TypedContractEvent<
      TransformedERC20Event.InputTuple,
      TransformedERC20Event.OutputTuple,
      TransformedERC20Event.OutputObject
    >;

    "TransformerDeployerUpdated(address)": TypedContractEvent<
      TransformerDeployerUpdatedEvent.InputTuple,
      TransformerDeployerUpdatedEvent.OutputTuple,
      TransformerDeployerUpdatedEvent.OutputObject
    >;
    TransformerDeployerUpdated: TypedContractEvent<
      TransformerDeployerUpdatedEvent.InputTuple,
      TransformerDeployerUpdatedEvent.OutputTuple,
      TransformerDeployerUpdatedEvent.OutputObject
    >;
  };
}
