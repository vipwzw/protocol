/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IMetaTransactionsFeature {
  export type MetaTransactionDataStruct = {
    signer: AddressLike;
    sender: AddressLike;
    minGasPrice: BigNumberish;
    maxGasPrice: BigNumberish;
    expirationTimeSeconds: BigNumberish;
    salt: BigNumberish;
    callData: BytesLike;
    value: BigNumberish;
    feeToken: AddressLike;
    feeAmount: BigNumberish;
  };

  export type MetaTransactionDataStructOutput = [
    signer: string,
    sender: string,
    minGasPrice: bigint,
    maxGasPrice: bigint,
    expirationTimeSeconds: bigint,
    salt: bigint,
    callData: string,
    value: bigint,
    feeToken: string,
    feeAmount: bigint
  ] & {
    signer: string;
    sender: string;
    minGasPrice: bigint;
    maxGasPrice: bigint;
    expirationTimeSeconds: bigint;
    salt: bigint;
    callData: string;
    value: bigint;
    feeToken: string;
    feeAmount: bigint;
  };
}

export declare namespace LibSignature {
  export type SignatureStruct = {
    signatureType: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type SignatureStructOutput = [
    signatureType: bigint,
    v: bigint,
    r: string,
    s: string
  ] & { signatureType: bigint; v: bigint; r: string; s: string };
}

export interface MetaTransactionsFeatureInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EIP712_DOMAIN_SEPARATOR"
      | "FEATURE_NAME"
      | "FEATURE_VERSION"
      | "MTX_EIP712_TYPEHASH"
      | "batchExecuteMetaTransactions"
      | "executeMetaTransaction"
      | "getMetaTransactionExecutedBlock"
      | "getMetaTransactionHash"
      | "getMetaTransactionHashExecutedBlock"
      | "migrate"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;

  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEATURE_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEATURE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MTX_EIP712_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchExecuteMetaTransactions",
    values: [
      IMetaTransactionsFeature.MetaTransactionDataStruct[],
      LibSignature.SignatureStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [
      IMetaTransactionsFeature.MetaTransactionDataStruct,
      LibSignature.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetaTransactionExecutedBlock",
    values: [IMetaTransactionsFeature.MetaTransactionDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetaTransactionHash",
    values: [IMetaTransactionsFeature.MetaTransactionDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetaTransactionHashExecutedBlock",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "migrate", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEATURE_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEATURE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MTX_EIP712_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchExecuteMetaTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetaTransactionExecutedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetaTransactionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetaTransactionHashExecutedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
}

export namespace MetaTransactionExecutedEvent {
  export type InputTuple = [
    hash: BytesLike,
    selector: BytesLike,
    signer: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [
    hash: string,
    selector: string,
    signer: string,
    sender: string
  ];
  export interface OutputObject {
    hash: string;
    selector: string;
    signer: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MetaTransactionsFeature extends BaseContract {
  connect(runner?: ContractRunner | null): MetaTransactionsFeature;
  waitForDeployment(): Promise<this>;

  interface: MetaTransactionsFeatureInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EIP712_DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  FEATURE_NAME: TypedContractMethod<[], [string], "view">;

  FEATURE_VERSION: TypedContractMethod<[], [bigint], "view">;

  MTX_EIP712_TYPEHASH: TypedContractMethod<[], [string], "view">;

  batchExecuteMetaTransactions: TypedContractMethod<
    [
      mtxs: IMetaTransactionsFeature.MetaTransactionDataStruct[],
      signatures: LibSignature.SignatureStruct[]
    ],
    [string[]],
    "payable"
  >;

  executeMetaTransaction: TypedContractMethod<
    [
      mtx: IMetaTransactionsFeature.MetaTransactionDataStruct,
      signature: LibSignature.SignatureStruct
    ],
    [string],
    "payable"
  >;

  getMetaTransactionExecutedBlock: TypedContractMethod<
    [mtx: IMetaTransactionsFeature.MetaTransactionDataStruct],
    [bigint],
    "view"
  >;

  getMetaTransactionHash: TypedContractMethod<
    [mtx: IMetaTransactionsFeature.MetaTransactionDataStruct],
    [string],
    "view"
  >;

  getMetaTransactionHashExecutedBlock: TypedContractMethod<
    [mtxHash: BytesLike],
    [bigint],
    "view"
  >;

  migrate: TypedContractMethod<[], [string], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EIP712_DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FEATURE_NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FEATURE_VERSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MTX_EIP712_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "batchExecuteMetaTransactions"
  ): TypedContractMethod<
    [
      mtxs: IMetaTransactionsFeature.MetaTransactionDataStruct[],
      signatures: LibSignature.SignatureStruct[]
    ],
    [string[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeMetaTransaction"
  ): TypedContractMethod<
    [
      mtx: IMetaTransactionsFeature.MetaTransactionDataStruct,
      signature: LibSignature.SignatureStruct
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getMetaTransactionExecutedBlock"
  ): TypedContractMethod<
    [mtx: IMetaTransactionsFeature.MetaTransactionDataStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMetaTransactionHash"
  ): TypedContractMethod<
    [mtx: IMetaTransactionsFeature.MetaTransactionDataStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMetaTransactionHashExecutedBlock"
  ): TypedContractMethod<[mtxHash: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "migrate"
  ): TypedContractMethod<[], [string], "nonpayable">;

  getEvent(
    key: "MetaTransactionExecuted"
  ): TypedContractEvent<
    MetaTransactionExecutedEvent.InputTuple,
    MetaTransactionExecutedEvent.OutputTuple,
    MetaTransactionExecutedEvent.OutputObject
  >;

  filters: {
    "MetaTransactionExecuted(bytes32,bytes4,address,address)": TypedContractEvent<
      MetaTransactionExecutedEvent.InputTuple,
      MetaTransactionExecutedEvent.OutputTuple,
      MetaTransactionExecutedEvent.OutputObject
    >;
    MetaTransactionExecuted: TypedContractEvent<
      MetaTransactionExecutedEvent.InputTuple,
      MetaTransactionExecutedEvent.OutputTuple,
      MetaTransactionExecutedEvent.OutputObject
    >;
  };
}
