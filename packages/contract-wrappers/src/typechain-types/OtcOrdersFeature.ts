/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace LibNativeOrder {
  export type OtcOrderStruct = {
    makerToken: AddressLike;
    takerToken: AddressLike;
    makerAmount: BigNumberish;
    takerAmount: BigNumberish;
    maker: AddressLike;
    taker: AddressLike;
    txOrigin: AddressLike;
    expiryAndNonce: BigNumberish;
  };

  export type OtcOrderStructOutput = [
    makerToken: string,
    takerToken: string,
    makerAmount: bigint,
    takerAmount: bigint,
    maker: string,
    taker: string,
    txOrigin: string,
    expiryAndNonce: bigint
  ] & {
    makerToken: string;
    takerToken: string;
    makerAmount: bigint;
    takerAmount: bigint;
    maker: string;
    taker: string;
    txOrigin: string;
    expiryAndNonce: bigint;
  };

  export type OtcOrderInfoStruct = {
    orderHash: BytesLike;
    status: BigNumberish;
  };

  export type OtcOrderInfoStructOutput = [orderHash: string, status: bigint] & {
    orderHash: string;
    status: bigint;
  };
}

export declare namespace LibSignature {
  export type SignatureStruct = {
    signatureType: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type SignatureStructOutput = [
    signatureType: bigint,
    v: bigint,
    r: string,
    s: string
  ] & { signatureType: bigint; v: bigint; r: string; s: string };
}

export interface OtcOrdersFeatureInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EIP712_DOMAIN_SEPARATOR"
      | "FEATURE_NAME"
      | "FEATURE_VERSION"
      | "_fillOtcOrder"
      | "batchFillTakerSignedOtcOrders"
      | "fillOtcOrder"
      | "fillOtcOrderForEth"
      | "fillOtcOrderWithEth"
      | "fillTakerSignedOtcOrder"
      | "fillTakerSignedOtcOrderForEth"
      | "getOtcOrderHash"
      | "getOtcOrderInfo"
      | "lastOtcTxOriginNonce"
      | "migrate"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OtcOrderFilled"): EventFragment;

  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEATURE_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEATURE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_fillOtcOrder",
    values: [
      LibNativeOrder.OtcOrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish,
      AddressLike,
      boolean,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchFillTakerSignedOtcOrders",
    values: [
      LibNativeOrder.OtcOrderStruct[],
      LibSignature.SignatureStruct[],
      LibSignature.SignatureStruct[],
      boolean[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOtcOrder",
    values: [
      LibNativeOrder.OtcOrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOtcOrderForEth",
    values: [
      LibNativeOrder.OtcOrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOtcOrderWithEth",
    values: [LibNativeOrder.OtcOrderStruct, LibSignature.SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "fillTakerSignedOtcOrder",
    values: [
      LibNativeOrder.OtcOrderStruct,
      LibSignature.SignatureStruct,
      LibSignature.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillTakerSignedOtcOrderForEth",
    values: [
      LibNativeOrder.OtcOrderStruct,
      LibSignature.SignatureStruct,
      LibSignature.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOtcOrderHash",
    values: [LibNativeOrder.OtcOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getOtcOrderInfo",
    values: [LibNativeOrder.OtcOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "lastOtcTxOriginNonce",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "migrate", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEATURE_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEATURE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_fillOtcOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchFillTakerSignedOtcOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOtcOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOtcOrderForEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOtcOrderWithEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillTakerSignedOtcOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillTakerSignedOtcOrderForEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOtcOrderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOtcOrderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastOtcTxOriginNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
}

export namespace OtcOrderFilledEvent {
  export type InputTuple = [
    orderHash: BytesLike,
    maker: AddressLike,
    taker: AddressLike,
    makerToken: AddressLike,
    takerToken: AddressLike,
    makerTokenFilledAmount: BigNumberish,
    takerTokenFilledAmount: BigNumberish
  ];
  export type OutputTuple = [
    orderHash: string,
    maker: string,
    taker: string,
    makerToken: string,
    takerToken: string,
    makerTokenFilledAmount: bigint,
    takerTokenFilledAmount: bigint
  ];
  export interface OutputObject {
    orderHash: string;
    maker: string;
    taker: string;
    makerToken: string;
    takerToken: string;
    makerTokenFilledAmount: bigint;
    takerTokenFilledAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OtcOrdersFeature extends BaseContract {
  connect(runner?: ContractRunner | null): OtcOrdersFeature;
  waitForDeployment(): Promise<this>;

  interface: OtcOrdersFeatureInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EIP712_DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  FEATURE_NAME: TypedContractMethod<[], [string], "view">;

  FEATURE_VERSION: TypedContractMethod<[], [bigint], "view">;

  _fillOtcOrder: TypedContractMethod<
    [
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: AddressLike,
      useSelfBalance: boolean,
      recipient: AddressLike
    ],
    [
      [bigint, bigint] & {
        takerTokenFilledAmount: bigint;
        makerTokenFilledAmount: bigint;
      }
    ],
    "nonpayable"
  >;

  batchFillTakerSignedOtcOrders: TypedContractMethod<
    [
      orders: LibNativeOrder.OtcOrderStruct[],
      makerSignatures: LibSignature.SignatureStruct[],
      takerSignatures: LibSignature.SignatureStruct[],
      unwrapWeth: boolean[]
    ],
    [boolean[]],
    "nonpayable"
  >;

  fillOtcOrder: TypedContractMethod<
    [
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish
    ],
    [
      [bigint, bigint] & {
        takerTokenFilledAmount: bigint;
        makerTokenFilledAmount: bigint;
      }
    ],
    "nonpayable"
  >;

  fillOtcOrderForEth: TypedContractMethod<
    [
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish
    ],
    [
      [bigint, bigint] & {
        takerTokenFilledAmount: bigint;
        makerTokenFilledAmount: bigint;
      }
    ],
    "nonpayable"
  >;

  fillOtcOrderWithEth: TypedContractMethod<
    [
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct
    ],
    [
      [bigint, bigint] & {
        takerTokenFilledAmount: bigint;
        makerTokenFilledAmount: bigint;
      }
    ],
    "payable"
  >;

  fillTakerSignedOtcOrder: TypedContractMethod<
    [
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerSignature: LibSignature.SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  fillTakerSignedOtcOrderForEth: TypedContractMethod<
    [
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerSignature: LibSignature.SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  getOtcOrderHash: TypedContractMethod<
    [order: LibNativeOrder.OtcOrderStruct],
    [string],
    "view"
  >;

  getOtcOrderInfo: TypedContractMethod<
    [order: LibNativeOrder.OtcOrderStruct],
    [LibNativeOrder.OtcOrderInfoStructOutput],
    "view"
  >;

  lastOtcTxOriginNonce: TypedContractMethod<
    [txOrigin: AddressLike, nonceBucket: BigNumberish],
    [bigint],
    "view"
  >;

  migrate: TypedContractMethod<[], [string], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EIP712_DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FEATURE_NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FEATURE_VERSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_fillOtcOrder"
  ): TypedContractMethod<
    [
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: AddressLike,
      useSelfBalance: boolean,
      recipient: AddressLike
    ],
    [
      [bigint, bigint] & {
        takerTokenFilledAmount: bigint;
        makerTokenFilledAmount: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchFillTakerSignedOtcOrders"
  ): TypedContractMethod<
    [
      orders: LibNativeOrder.OtcOrderStruct[],
      makerSignatures: LibSignature.SignatureStruct[],
      takerSignatures: LibSignature.SignatureStruct[],
      unwrapWeth: boolean[]
    ],
    [boolean[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillOtcOrder"
  ): TypedContractMethod<
    [
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish
    ],
    [
      [bigint, bigint] & {
        takerTokenFilledAmount: bigint;
        makerTokenFilledAmount: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillOtcOrderForEth"
  ): TypedContractMethod<
    [
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish
    ],
    [
      [bigint, bigint] & {
        takerTokenFilledAmount: bigint;
        makerTokenFilledAmount: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillOtcOrderWithEth"
  ): TypedContractMethod<
    [
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct
    ],
    [
      [bigint, bigint] & {
        takerTokenFilledAmount: bigint;
        makerTokenFilledAmount: bigint;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "fillTakerSignedOtcOrder"
  ): TypedContractMethod<
    [
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerSignature: LibSignature.SignatureStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillTakerSignedOtcOrderForEth"
  ): TypedContractMethod<
    [
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerSignature: LibSignature.SignatureStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getOtcOrderHash"
  ): TypedContractMethod<
    [order: LibNativeOrder.OtcOrderStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOtcOrderInfo"
  ): TypedContractMethod<
    [order: LibNativeOrder.OtcOrderStruct],
    [LibNativeOrder.OtcOrderInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastOtcTxOriginNonce"
  ): TypedContractMethod<
    [txOrigin: AddressLike, nonceBucket: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "migrate"
  ): TypedContractMethod<[], [string], "nonpayable">;

  getEvent(
    key: "OtcOrderFilled"
  ): TypedContractEvent<
    OtcOrderFilledEvent.InputTuple,
    OtcOrderFilledEvent.OutputTuple,
    OtcOrderFilledEvent.OutputObject
  >;

  filters: {
    "OtcOrderFilled(bytes32,address,address,address,address,uint128,uint128)": TypedContractEvent<
      OtcOrderFilledEvent.InputTuple,
      OtcOrderFilledEvent.OutputTuple,
      OtcOrderFilledEvent.OutputObject
    >;
    OtcOrderFilled: TypedContractEvent<
      OtcOrderFilledEvent.InputTuple,
      OtcOrderFilledEvent.OutputTuple,
      OtcOrderFilledEvent.OutputObject
    >;
  };
}
