/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IZrxTreasury {
  export type TreasuryParametersStruct = {
    votingPeriod: BigNumberish;
    proposalThreshold: BigNumberish;
    quorumThreshold: BigNumberish;
    defaultPoolId: BytesLike;
  };

  export type TreasuryParametersStructOutput = [
    votingPeriod: bigint,
    proposalThreshold: bigint,
    quorumThreshold: bigint,
    defaultPoolId: string
  ] & {
    votingPeriod: bigint;
    proposalThreshold: bigint;
    quorumThreshold: bigint;
    defaultPoolId: string;
  };

  export type ProposedActionStruct = {
    target: AddressLike;
    data: BytesLike;
    value: BigNumberish;
  };

  export type ProposedActionStructOutput = [
    target: string,
    data: string,
    value: bigint
  ] & { target: string; data: string; value: bigint };
}

export interface ZrxTreasuryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "castVote"
      | "castVoteBySignature"
      | "defaultPoolId"
      | "defaultPoolOperator"
      | "execute"
      | "getVotingPower"
      | "hasVoted"
      | "proposalCount"
      | "proposalThreshold"
      | "proposals"
      | "propose"
      | "quorumThreshold"
      | "stakingProxy"
      | "updateThresholds"
      | "votingPeriod"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ProposalCreated" | "ProposalExecuted" | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, boolean, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySignature",
    values: [
      BigNumberish,
      boolean,
      BytesLike[],
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultPoolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultPoolOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish, IZrxTreasury.ProposedActionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPower",
    values: [AddressLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [
      IZrxTreasury.ProposedActionStruct[],
      BigNumberish,
      string,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateThresholds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultPoolId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultPoolOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposer: AddressLike,
    operatedPoolIds: BytesLike[],
    proposalId: BigNumberish,
    actions: IZrxTreasury.ProposedActionStruct[],
    executionEpoch: BigNumberish,
    description: string
  ];
  export type OutputTuple = [
    proposer: string,
    operatedPoolIds: string[],
    proposalId: bigint,
    actions: IZrxTreasury.ProposedActionStructOutput[],
    executionEpoch: bigint,
    description: string
  ];
  export interface OutputObject {
    proposer: string;
    operatedPoolIds: string[];
    proposalId: bigint;
    actions: IZrxTreasury.ProposedActionStructOutput[];
    executionEpoch: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    voter: AddressLike,
    operatedPoolIds: BytesLike[],
    proposalId: BigNumberish,
    support: boolean,
    votingPower: BigNumberish
  ];
  export type OutputTuple = [
    voter: string,
    operatedPoolIds: string[],
    proposalId: bigint,
    support: boolean,
    votingPower: bigint
  ];
  export interface OutputObject {
    voter: string;
    operatedPoolIds: string[];
    proposalId: bigint;
    support: boolean;
    votingPower: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZrxTreasury extends BaseContract {
  connect(runner?: ContractRunner | null): ZrxTreasury;
  waitForDeployment(): Promise<this>;

  interface: ZrxTreasuryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  castVote: TypedContractMethod<
    [proposalId: BigNumberish, support: boolean, operatedPoolIds: BytesLike[]],
    [void],
    "nonpayable"
  >;

  castVoteBySignature: TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: boolean,
      operatedPoolIds: BytesLike[],
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  defaultPoolId: TypedContractMethod<[], [string], "view">;

  defaultPoolOperator: TypedContractMethod<[], [string], "view">;

  execute: TypedContractMethod<
    [proposalId: BigNumberish, actions: IZrxTreasury.ProposedActionStruct[]],
    [void],
    "payable"
  >;

  getVotingPower: TypedContractMethod<
    [account: AddressLike, operatedPoolIds: BytesLike[]],
    [bigint],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proposalThreshold: TypedContractMethod<[], [bigint], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        actionsHash: string;
        executionEpoch: bigint;
        voteEpoch: bigint;
        votesFor: bigint;
        votesAgainst: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  propose: TypedContractMethod<
    [
      actions: IZrxTreasury.ProposedActionStruct[],
      executionEpoch: BigNumberish,
      description: string,
      operatedPoolIds: BytesLike[]
    ],
    [bigint],
    "nonpayable"
  >;

  quorumThreshold: TypedContractMethod<[], [bigint], "view">;

  stakingProxy: TypedContractMethod<[], [string], "view">;

  updateThresholds: TypedContractMethod<
    [newProposalThreshold: BigNumberish, newQuorumThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  votingPeriod: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: boolean, operatedPoolIds: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteBySignature"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: boolean,
      operatedPoolIds: BytesLike[],
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "defaultPoolId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "defaultPoolOperator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [proposalId: BigNumberish, actions: IZrxTreasury.ProposedActionStruct[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getVotingPower"
  ): TypedContractMethod<
    [account: AddressLike, operatedPoolIds: BytesLike[]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        actionsHash: string;
        executionEpoch: bigint;
        voteEpoch: bigint;
        votesFor: bigint;
        votesAgainst: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "propose"
  ): TypedContractMethod<
    [
      actions: IZrxTreasury.ProposedActionStruct[],
      executionEpoch: BigNumberish,
      description: string,
      operatedPoolIds: BytesLike[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "quorumThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakingProxy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateThresholds"
  ): TypedContractMethod<
    [newProposalThreshold: BigNumberish, newQuorumThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votingPeriod"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "ProposalCreated(address,bytes32[],uint256,tuple[],uint256,string)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(uint256)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "VoteCast(address,bytes32[],uint256,bool,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
