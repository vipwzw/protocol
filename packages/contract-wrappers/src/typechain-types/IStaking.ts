/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IStaking {
  export type StoredBalanceStruct = {
    currentEpoch: BigNumberish;
    currentEpochBalance: BigNumberish;
    nextEpochBalance: BigNumberish;
  };

  export type StoredBalanceStructOutput = [
    currentEpoch: bigint,
    currentEpochBalance: bigint,
    nextEpochBalance: bigint
  ] & {
    currentEpoch: bigint;
    currentEpochBalance: bigint;
    nextEpochBalance: bigint;
  };

  export type PoolStruct = {
    operator: AddressLike;
    operatorShare: BigNumberish;
  };

  export type PoolStructOutput = [operator: string, operatorShare: bigint] & {
    operator: string;
    operatorShare: bigint;
  };
}

export interface IStakingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createStakingPool"
      | "currentEpoch"
      | "currentEpochStartTimeInSeconds"
      | "epochDurationInSeconds"
      | "getGlobalStakeByStatus"
      | "getOwnerStakeByStatus"
      | "getStakeDelegatedToPoolByOwner"
      | "getStakingPool"
      | "getTotalStakeDelegatedToPool"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createStakingPool",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpochStartTimeInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochDurationInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalStakeByStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerStakeByStatus",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeDelegatedToPoolByOwner",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingPool",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStakeDelegatedToPool",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createStakingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpochStartTimeInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochDurationInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalStakeByStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerStakeByStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeDelegatedToPoolByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStakeDelegatedToPool",
    data: BytesLike
  ): Result;
}

export interface IStaking extends BaseContract {
  connect(runner?: ContractRunner | null): IStaking;
  waitForDeployment(): Promise<this>;

  interface: IStakingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createStakingPool: TypedContractMethod<
    [operatorShare: BigNumberish, addOperatorAsMaker: boolean],
    [string],
    "nonpayable"
  >;

  currentEpoch: TypedContractMethod<[], [bigint], "view">;

  currentEpochStartTimeInSeconds: TypedContractMethod<[], [bigint], "view">;

  epochDurationInSeconds: TypedContractMethod<[], [bigint], "view">;

  getGlobalStakeByStatus: TypedContractMethod<
    [stakeStatus: BigNumberish],
    [IStaking.StoredBalanceStructOutput],
    "view"
  >;

  getOwnerStakeByStatus: TypedContractMethod<
    [staker: AddressLike, stakeStatus: BigNumberish],
    [IStaking.StoredBalanceStructOutput],
    "view"
  >;

  getStakeDelegatedToPoolByOwner: TypedContractMethod<
    [staker: AddressLike, poolId: BytesLike],
    [IStaking.StoredBalanceStructOutput],
    "view"
  >;

  getStakingPool: TypedContractMethod<
    [poolId: BytesLike],
    [IStaking.PoolStructOutput],
    "view"
  >;

  getTotalStakeDelegatedToPool: TypedContractMethod<
    [poolId: BytesLike],
    [IStaking.StoredBalanceStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createStakingPool"
  ): TypedContractMethod<
    [operatorShare: BigNumberish, addOperatorAsMaker: boolean],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentEpochStartTimeInSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochDurationInSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGlobalStakeByStatus"
  ): TypedContractMethod<
    [stakeStatus: BigNumberish],
    [IStaking.StoredBalanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwnerStakeByStatus"
  ): TypedContractMethod<
    [staker: AddressLike, stakeStatus: BigNumberish],
    [IStaking.StoredBalanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStakeDelegatedToPoolByOwner"
  ): TypedContractMethod<
    [staker: AddressLike, poolId: BytesLike],
    [IStaking.StoredBalanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStakingPool"
  ): TypedContractMethod<
    [poolId: BytesLike],
    [IStaking.PoolStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalStakeDelegatedToPool"
  ): TypedContractMethod<
    [poolId: BytesLike],
    [IStaking.StoredBalanceStructOutput],
    "view"
  >;

  filters: {};
}
