/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IMultiplexFeature {
  export type BatchSellSubcallStruct = {
    id: BigNumberish;
    sellAmount: BigNumberish;
    data: BytesLike;
  };

  export type BatchSellSubcallStructOutput = [
    id: bigint,
    sellAmount: bigint,
    data: string
  ] & { id: bigint; sellAmount: bigint; data: string };

  export type BatchSellParamsStruct = {
    inputToken: AddressLike;
    outputToken: AddressLike;
    sellAmount: BigNumberish;
    calls: IMultiplexFeature.BatchSellSubcallStruct[];
    useSelfBalance: boolean;
    recipient: AddressLike;
    payer: AddressLike;
  };

  export type BatchSellParamsStructOutput = [
    inputToken: string,
    outputToken: string,
    sellAmount: bigint,
    calls: IMultiplexFeature.BatchSellSubcallStructOutput[],
    useSelfBalance: boolean,
    recipient: string,
    payer: string
  ] & {
    inputToken: string;
    outputToken: string;
    sellAmount: bigint;
    calls: IMultiplexFeature.BatchSellSubcallStructOutput[];
    useSelfBalance: boolean;
    recipient: string;
    payer: string;
  };

  export type MultiHopSellSubcallStruct = { id: BigNumberish; data: BytesLike };

  export type MultiHopSellSubcallStructOutput = [id: bigint, data: string] & {
    id: bigint;
    data: string;
  };

  export type MultiHopSellParamsStruct = {
    tokens: AddressLike[];
    sellAmount: BigNumberish;
    calls: IMultiplexFeature.MultiHopSellSubcallStruct[];
    useSelfBalance: boolean;
    recipient: AddressLike;
    payer: AddressLike;
  };

  export type MultiHopSellParamsStructOutput = [
    tokens: string[],
    sellAmount: bigint,
    calls: IMultiplexFeature.MultiHopSellSubcallStructOutput[],
    useSelfBalance: boolean,
    recipient: string,
    payer: string
  ] & {
    tokens: string[];
    sellAmount: bigint;
    calls: IMultiplexFeature.MultiHopSellSubcallStructOutput[];
    useSelfBalance: boolean;
    recipient: string;
    payer: string;
  };
}

export interface IMultiplexFeatureInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_multiplexBatchSell"
      | "_multiplexMultiHopSell"
      | "multiplexBatchSellEthForToken"
      | "multiplexBatchSellTokenForEth"
      | "multiplexBatchSellTokenForToken"
      | "multiplexMultiHopSellEthForToken"
      | "multiplexMultiHopSellTokenForEth"
      | "multiplexMultiHopSellTokenForToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_multiplexBatchSell",
    values: [IMultiplexFeature.BatchSellParamsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_multiplexMultiHopSell",
    values: [IMultiplexFeature.MultiHopSellParamsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplexBatchSellEthForToken",
    values: [
      AddressLike,
      IMultiplexFeature.BatchSellSubcallStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplexBatchSellTokenForEth",
    values: [
      AddressLike,
      IMultiplexFeature.BatchSellSubcallStruct[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplexBatchSellTokenForToken",
    values: [
      AddressLike,
      AddressLike,
      IMultiplexFeature.BatchSellSubcallStruct[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplexMultiHopSellEthForToken",
    values: [
      AddressLike[],
      IMultiplexFeature.MultiHopSellSubcallStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplexMultiHopSellTokenForEth",
    values: [
      AddressLike[],
      IMultiplexFeature.MultiHopSellSubcallStruct[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplexMultiHopSellTokenForToken",
    values: [
      AddressLike[],
      IMultiplexFeature.MultiHopSellSubcallStruct[],
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "_multiplexBatchSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_multiplexMultiHopSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplexBatchSellEthForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplexBatchSellTokenForEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplexBatchSellTokenForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplexMultiHopSellEthForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplexMultiHopSellTokenForEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplexMultiHopSellTokenForToken",
    data: BytesLike
  ): Result;
}

export interface IMultiplexFeature extends BaseContract {
  connect(runner?: ContractRunner | null): IMultiplexFeature;
  waitForDeployment(): Promise<this>;

  interface: IMultiplexFeatureInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _multiplexBatchSell: TypedContractMethod<
    [
      params: IMultiplexFeature.BatchSellParamsStruct,
      minBuyAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  _multiplexMultiHopSell: TypedContractMethod<
    [
      params: IMultiplexFeature.MultiHopSellParamsStruct,
      minBuyAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  multiplexBatchSellEthForToken: TypedContractMethod<
    [
      outputToken: AddressLike,
      calls: IMultiplexFeature.BatchSellSubcallStruct[],
      minBuyAmount: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  multiplexBatchSellTokenForEth: TypedContractMethod<
    [
      inputToken: AddressLike,
      calls: IMultiplexFeature.BatchSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  multiplexBatchSellTokenForToken: TypedContractMethod<
    [
      inputToken: AddressLike,
      outputToken: AddressLike,
      calls: IMultiplexFeature.BatchSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  multiplexMultiHopSellEthForToken: TypedContractMethod<
    [
      tokens: AddressLike[],
      calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
      minBuyAmount: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  multiplexMultiHopSellTokenForEth: TypedContractMethod<
    [
      tokens: AddressLike[],
      calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  multiplexMultiHopSellTokenForToken: TypedContractMethod<
    [
      tokens: AddressLike[],
      calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_multiplexBatchSell"
  ): TypedContractMethod<
    [
      params: IMultiplexFeature.BatchSellParamsStruct,
      minBuyAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_multiplexMultiHopSell"
  ): TypedContractMethod<
    [
      params: IMultiplexFeature.MultiHopSellParamsStruct,
      minBuyAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "multiplexBatchSellEthForToken"
  ): TypedContractMethod<
    [
      outputToken: AddressLike,
      calls: IMultiplexFeature.BatchSellSubcallStruct[],
      minBuyAmount: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "multiplexBatchSellTokenForEth"
  ): TypedContractMethod<
    [
      inputToken: AddressLike,
      calls: IMultiplexFeature.BatchSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "multiplexBatchSellTokenForToken"
  ): TypedContractMethod<
    [
      inputToken: AddressLike,
      outputToken: AddressLike,
      calls: IMultiplexFeature.BatchSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "multiplexMultiHopSellEthForToken"
  ): TypedContractMethod<
    [
      tokens: AddressLike[],
      calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
      minBuyAmount: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "multiplexMultiHopSellTokenForEth"
  ): TypedContractMethod<
    [
      tokens: AddressLike[],
      calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "multiplexMultiHopSellTokenForToken"
  ): TypedContractMethod<
    [
      tokens: AddressLike[],
      calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
