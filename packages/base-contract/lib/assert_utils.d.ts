/// <reference types="chai" />
/// <reference types="chai-as-promised" />
export declare const assert: {
    isETHAddressHex(variableName: string, value: string): void;
    isHexString(variableName: string, value: string): void;
    doesConformToSchema(variableName: string, value: any, schema: object): void;
    isBlockParam(variableName: string, value: any): void;
    fail(message?: string | undefined): never;
    fail<T>(actual: T, expected: T, message?: string | undefined, operator?: string | undefined): never;
    isOk(value: unknown, message?: string | undefined): asserts value;
    ok(value: unknown, message?: string | undefined): asserts value;
    isNotOk<T_1>(value: T_1, message?: string | undefined): void;
    notOk<T_2>(value: T_2, message?: string | undefined): void;
    equal<T_3>(actual: T_3, expected: T_3, message?: string | undefined): void;
    notEqual<T_4>(actual: T_4, expected: T_4, message?: string | undefined): void;
    strictEqual<T_5>(actual: T_5, expected: T_5, message?: string | undefined): void;
    notStrictEqual<T_6>(actual: T_6, expected: T_6, message?: string | undefined): void;
    deepEqual<T_7>(actual: T_7, expected: T_7, message?: string | undefined): void;
    notDeepEqual<T_8>(actual: T_8, expected: T_8, message?: string | undefined): void;
    deepStrictEqual<T_9>(actual: T_9, expected: T_9, message?: string | undefined): void;
    isAbove(valueToCheck: number, valueToBeAbove: number, message?: string | undefined): void;
    isAtLeast(valueToCheck: number, valueToBeAtLeast: number, message?: string | undefined): void;
    isBelow(valueToCheck: number, valueToBeBelow: number, message?: string | undefined): void;
    isAtMost(valueToCheck: number, valueToBeAtMost: number, message?: string | undefined): void;
    isTrue(value: unknown, message?: string | undefined): asserts value is true;
    isFalse(value: unknown, message?: string | undefined): asserts value is false;
    isNotTrue<T_10>(value: T_10, message?: string | undefined): asserts value is Exclude<T_10, true>;
    isNotFalse<T_11>(value: T_11, message?: string | undefined): asserts value is Exclude<T_11, false>;
    isNull(value: unknown, message?: string | undefined): asserts value is null;
    isNotNull<T_12>(value: T_12, message?: string | undefined): asserts value is Exclude<T_12, null>;
    isNaN<T_13>(value: T_13, message?: string | undefined): void;
    isNotNaN<T_14>(value: T_14, message?: string | undefined): void;
    exists<T_15>(value: T_15, message?: string | undefined): asserts value is NonNullable<T_15>;
    notExists(value: unknown, message?: string | undefined): asserts value is null | undefined;
    isUndefined(value: unknown, message?: string | undefined): asserts value is undefined;
    isDefined<T_16>(value: T_16, message?: string | undefined): asserts value is Exclude<T_16, undefined>;
    isFunction<T_17>(value: T_17, message?: string | undefined): void;
    isNotFunction<T_18>(value: T_18, message?: string | undefined): void;
    isObject<T_19>(value: T_19, message?: string | undefined): void;
    isNotObject<T_20>(value: T_20, message?: string | undefined): void;
    isArray<T_21>(value: T_21, message?: string | undefined): void;
    isNotArray<T_22>(value: T_22, message?: string | undefined): void;
    isString<T_23>(value: T_23, message?: string | undefined): void;
    isNotString<T_24>(value: T_24, message?: string | undefined): void;
    isNumber<T_25>(value: T_25, message?: string | undefined): void;
    isNotNumber<T_26>(value: T_26, message?: string | undefined): void;
    isFinite<T_27>(value: T_27, message?: string | undefined): void;
    isBoolean<T_28>(value: T_28, message?: string | undefined): void;
    isNotBoolean<T_29>(value: T_29, message?: string | undefined): void;
    typeOf<T_30>(value: T_30, name: string, message?: string | undefined): void;
    notTypeOf<T_31>(value: T_31, name: string, message?: string | undefined): void;
    instanceOf<T_32>(value: unknown, constructor: Chai.Constructor<T_32>, message?: string | undefined): asserts value is T_32;
    notInstanceOf<T_33, U>(value: T_33, type: Chai.Constructor<U>, message?: string | undefined): asserts value is Exclude<T_33, U>;
    include(haystack: string, needle: string, message?: string | undefined): void;
    include<T_34>(haystack: readonly T_34[] | ReadonlySet<T_34> | ReadonlyMap<any, T_34>, needle: T_34, message?: string | undefined): void;
    include<T_35 extends object>(haystack: WeakSet<T_35>, needle: T_35, message?: string | undefined): void;
    include<T_36>(haystack: T_36, needle: Partial<T_36>, message?: string | undefined): void;
    notInclude(haystack: string, needle: string, message?: string | undefined): void;
    notInclude<T_37>(haystack: readonly T_37[] | ReadonlySet<T_37> | ReadonlyMap<any, T_37>, needle: T_37, message?: string | undefined): void;
    notInclude<T_38 extends object>(haystack: WeakSet<T_38>, needle: T_38, message?: string | undefined): void;
    notInclude<T_39>(haystack: T_39, needle: Partial<T_39>, message?: string | undefined): void;
    deepInclude(haystack: string, needle: string, message?: string | undefined): void;
    deepInclude<T_40>(haystack: readonly T_40[] | ReadonlySet<T_40> | ReadonlyMap<any, T_40>, needle: T_40, message?: string | undefined): void;
    deepInclude<T_41>(haystack: T_41, needle: T_41 extends WeakSet<any> ? never : Partial<T_41>, message?: string | undefined): void;
    notDeepInclude(haystack: string, needle: string, message?: string | undefined): void;
    notDeepInclude<T_42>(haystack: readonly T_42[] | ReadonlySet<T_42> | ReadonlyMap<any, T_42>, needle: T_42, message?: string | undefined): void;
    notDeepInclude<T_43>(haystack: T_43, needle: T_43 extends WeakSet<any> ? never : Partial<T_43>, message?: string | undefined): void;
    nestedInclude(haystack: any, needle: any, message?: string | undefined): void;
    notNestedInclude(haystack: any, needle: any, message?: string | undefined): void;
    deepNestedInclude(haystack: any, needle: any, message?: string | undefined): void;
    notDeepNestedInclude(haystack: any, needle: any, message?: string | undefined): void;
    ownInclude(haystack: any, needle: any, message?: string | undefined): void;
    notOwnInclude(haystack: any, needle: any, message?: string | undefined): void;
    deepOwnInclude(haystack: any, needle: any, message?: string | undefined): void;
    notDeepOwnInclude(haystack: any, needle: any, message?: string | undefined): void;
    match(value: string, regexp: RegExp, message?: string | undefined): void;
    notMatch(expected: any, regexp: RegExp, message?: string | undefined): void;
    property<T_44>(object: T_44, property: string, message?: string | undefined): void;
    notProperty<T_45>(object: T_45, property: string, message?: string | undefined): void;
    deepProperty<T_46>(object: T_46, property: string, message?: string | undefined): void;
    notDeepProperty<T_47>(object: T_47, property: string, message?: string | undefined): void;
    propertyVal<T_48, V>(object: T_48, property: string, value: V, message?: string | undefined): void;
    notPropertyVal<T_49, V_1>(object: T_49, property: string, value: V_1, message?: string | undefined): void;
    deepPropertyVal<T_50, V_2>(object: T_50, property: string, value: V_2, message?: string | undefined): void;
    notDeepPropertyVal<T_51, V_3>(object: T_51, property: string, value: V_3, message?: string | undefined): void;
    lengthOf<T_52 extends {
        readonly length?: number | undefined;
    } | {
        readonly size?: number | undefined;
    }>(object: T_52, length: number, message?: string | undefined): void;
    throw(fn: () => void, errMsgMatcher?: string | RegExp | undefined, ignored?: any, message?: string | undefined): void;
    throw(fn: () => void, errorLike?: Error | Chai.ErrorConstructor | null | undefined, errMsgMatcher?: string | RegExp | null | undefined, message?: string | undefined): void;
    throws(fn: () => void, errMsgMatcher?: string | RegExp | undefined, ignored?: any, message?: string | undefined): void;
    throws(fn: () => void, errorLike?: Error | Chai.ErrorConstructor | null | undefined, errMsgMatcher?: string | RegExp | null | undefined, message?: string | undefined): void;
    Throw(fn: () => void, errMsgMatcher?: string | RegExp | undefined, ignored?: any, message?: string | undefined): void;
    Throw(fn: () => void, errorLike?: Error | Chai.ErrorConstructor | null | undefined, errMsgMatcher?: string | RegExp | null | undefined, message?: string | undefined): void;
    doesNotThrow(fn: () => void, errMsgMatcher?: string | RegExp | undefined, ignored?: any, message?: string | undefined): void;
    doesNotThrow(fn: () => void, errorLike?: Error | Chai.ErrorConstructor | null | undefined, errMsgMatcher?: string | RegExp | null | undefined, message?: string | undefined): void;
    operator(val1: Chai.OperatorComparable, operator: string, val2: Chai.OperatorComparable, message?: string | undefined): void;
    closeTo(actual: number, expected: number, delta: number, message?: string | undefined): void;
    approximately(act: number, exp: number, delta: number, message?: string | undefined): void;
    sameMembers<T_53>(set1: T_53[], set2: T_53[], message?: string | undefined): void;
    sameDeepMembers<T_54>(set1: T_54[], set2: T_54[], message?: string | undefined): void;
    notSameDeepMembers<T_55>(set1: T_55[], set2: T_55[], message?: string | undefined): void;
    sameOrderedMembers<T_56>(set1: T_56[], set2: T_56[], message?: string | undefined): void;
    notSameOrderedMembers<T_57>(set1: T_57[], set2: T_57[], message?: string | undefined): void;
    sameDeepOrderedMembers<T_58>(set1: T_58[], set2: T_58[], message?: string | undefined): void;
    notSameDeepOrderedMembers<T_59>(set1: T_59[], set2: T_59[], message?: string | undefined): void;
    includeOrderedMembers<T_60>(superset: T_60[], subset: T_60[], message?: string | undefined): void;
    notIncludeOrderedMembers<T_61>(superset: T_61[], subset: T_61[], message?: string | undefined): void;
    includeDeepOrderedMembers<T_62>(superset: T_62[], subset: T_62[], message?: string | undefined): void;
    notIncludeDeepOrderedMembers<T_63>(superset: T_63[], subset: T_63[], message?: string | undefined): void;
    includeMembers<T_64>(superset: T_64[], subset: T_64[], message?: string | undefined): void;
    notIncludeMembers<T_65>(superset: T_65[], subset: T_65[], message?: string | undefined): void;
    includeDeepMembers<T_66>(superset: T_66[], subset: T_66[], message?: string | undefined): void;
    notIncludeDeepMembers<T_67>(superset: T_67[], subset: T_67[], message?: string | undefined): void;
    oneOf<T_68>(inList: T_68, list: T_68[], message?: string | undefined): void;
    changes<T_69>(modifier: Function, object: T_69, property: string, message?: string | undefined): void;
    changesBy<T_70>(modifier: Function, object: T_70, property: string, change: number, message?: string | undefined): void;
    changesBy<T_71>(modifier: Function, object: T_71, change: number, message?: string | undefined): void;
    doesNotChange<T_72>(modifier: Function, object: T_72, property: string, message?: string | undefined): void;
    increases<T_73>(modifier: Function, object: T_73, property: string, message?: string | undefined): void;
    increasesBy<T_74>(modifier: Function, object: T_74, property: string, change: number, message?: string | undefined): void;
    increasesBy<T_75>(modifier: Function, object: T_75, change: number, message?: string | undefined): void;
    doesNotIncrease<T_76>(modifier: Function, object: T_76, property: string, message?: string | undefined): void;
    increasesButNotBy<T_77>(modifier: Function, object: T_77, property: string, change: number, message?: string | undefined): void;
    increasesButNotBy<T_78>(modifier: Function, object: T_78, change: number, message?: string | undefined): void;
    decreases<T_79>(modifier: Function, object: T_79, property: string, message?: string | undefined): void;
    decreasesBy<T_80>(modifier: Function, object: T_80, property: string, change: number, message?: string | undefined): void;
    decreasesBy<T_81>(modifier: Function, object: T_81, change: number, message?: string | undefined): void;
    doesNotDecrease<T_82>(modifier: Function, object: T_82, property: string, message?: string | undefined): void;
    doesNotDecreaseBy<T_83>(modifier: Function, object: T_83, property: string, change: number, message?: string | undefined): void;
    doesNotDecreaseBy<T_84>(modifier: Function, object: T_84, change: number, message?: string | undefined): void;
    decreasesButNotBy<T_85>(modifier: Function, object: T_85, property: string, change: number, message?: string | undefined): void;
    decreasesButNotBy<T_86>(modifier: Function, object: T_86, change: number, message?: string | undefined): void;
    ifError<T_87>(object: T_87, message?: string | undefined): void;
    isExtensible<T_88>(object: T_88, message?: string | undefined): void;
    extensible<T_89>(object: T_89, message?: string | undefined): void;
    isNotExtensible<T_90>(object: T_90, message?: string | undefined): void;
    notExtensible<T_91>(object: T_91, message?: string | undefined): void;
    isSealed<T_92>(object: T_92, message?: string | undefined): void;
    sealed<T_93>(object: T_93, message?: string | undefined): void;
    isNotSealed<T_94>(object: T_94, message?: string | undefined): void;
    notSealed<T_95>(object: T_95, message?: string | undefined): void;
    isFrozen<T_96>(object: T_96, message?: string | undefined): void;
    frozen<T_97>(object: T_97, message?: string | undefined): void;
    isNotFrozen<T_98>(object: T_98, message?: string | undefined): void;
    notFrozen<T_99>(object: T_99, message?: string | undefined): void;
    isEmpty<T_100>(object: T_100, message?: string | undefined): void;
    isNotEmpty<T_101>(object: T_101, message?: string | undefined): void;
    hasAnyKeys<T_102>(object: T_102, keys: (string | Object)[] | {
        [key: string]: any;
    }, message?: string | undefined): void;
    hasAllKeys<T_103>(object: T_103, keys: (string | Object)[] | {
        [key: string]: any;
    }, message?: string | undefined): void;
    containsAllKeys<T_104>(object: T_104, keys: (string | Object)[] | {
        [key: string]: any;
    }, message?: string | undefined): void;
    doesNotHaveAnyKeys<T_105>(object: T_105, keys: (string | Object)[] | {
        [key: string]: any;
    }, message?: string | undefined): void;
    doesNotHaveAllKeys<T_106>(object: T_106, keys: (string | Object)[] | {
        [key: string]: any;
    }, message?: string | undefined): void;
    hasAnyDeepKeys<T_107>(object: T_107, keys: (string | Object)[] | {
        [key: string]: any;
    }, message?: string | undefined): void;
    hasAllDeepKeys<T_108>(object: T_108, keys: (string | Object)[] | {
        [key: string]: any;
    }, message?: string | undefined): void;
    containsAllDeepKeys<T_109>(object: T_109, keys: (string | Object)[] | {
        [key: string]: any;
    }, message?: string | undefined): void;
    doesNotHaveAnyDeepKeys<T_110>(object: T_110, keys: (string | Object)[] | {
        [key: string]: any;
    }, message?: string | undefined): void;
    doesNotHaveAllDeepKeys<T_111>(object: T_111, keys: (string | Object)[] | {
        [key: string]: any;
    }, message?: string | undefined): void;
    nestedProperty<T_112>(object: T_112, property: string, message?: string | undefined): void;
    notNestedProperty<T_113>(object: T_113, property: string, message?: string | undefined): void;
    nestedPropertyVal<T_114>(object: T_114, property: string, value: any, message?: string | undefined): void;
    notNestedPropertyVal<T_115>(object: T_115, property: string, value: any, message?: string | undefined): void;
    deepNestedPropertyVal<T_116>(object: T_116, property: string, value: any, message?: string | undefined): void;
    notDeepNestedPropertyVal<T_117>(object: T_117, property: string, value: any, message?: string | undefined): void;
    eventually: Chai.PromisedAssert;
    isFulfilled(promise: PromiseLike<any>, message?: string | undefined): PromiseLike<void>;
    becomes(promise: PromiseLike<any>, expected: any, message?: string | undefined): PromiseLike<void>;
    doesNotBecome(promise: PromiseLike<any>, expected: any, message?: string | undefined): PromiseLike<void>;
    isRejected(promise: PromiseLike<any>, message?: string | undefined): PromiseLike<void>;
    isRejected(promise: PromiseLike<any>, expected: any, message?: string | undefined): PromiseLike<void>;
    isRejected(promise: PromiseLike<any>, match: RegExp, message?: string | undefined): PromiseLike<void>;
    notify(fn: Function): PromiseLike<void>;
};
