---
description: Git workflow and version control practices for Solidity upgrades
alwaysApply: false
---

# Git 工作流程和版本控制

## 分支命名规范

### 功能分支
- `feat/功能描述` - 新功能开发
- `fix/问题描述` - 问题修复
- `upgrade/模块名` - 合约升级

### 示例
- `feat/upgrade-solidity-to-0.8.19` - Solidity 版本升级
- `fix/apple-silicon-compatibility` - Apple Silicon 兼容性修复

## 提交信息规范

### 格式
```
类型: 简短描述

详细说明：
- 具体更改内容
- 影响范围
- 相关文件

技术细节：
- 版本变更
- 配置更新
- 兼容性说明
```

### 提交类型
- `feat:` - 新功能
- `fix:` - 问题修复
- `upgrade:` - 版本升级
- `config:` - 配置更改
- `docs:` - 文档更新

## 关键文件管理

### 始终包含的更改
当进行 Solidity 升级时，确保提交：
- 合约源码 (*.sol)
- 配置文件 (foundry.toml)
- 相关文档 (README*.md)

### 遗留合约处理
- 移动到 `legacy_contracts/` 目录
- 保留原始文件结构
- 添加说明文档

## PR 最佳实践

### PR 标题
```
类型: 简短但清晰的描述
```

### PR 描述模板
```markdown
## 🎯 目标
[解决的问题描述]

## ✅ 主要更改
### 升级的模块
- **模块名**: 具体更改内容

### 技术改进
- 🚫 移除的过时功能
- ✅ 新增的现代特性

## 🧪 测试结果
✅ 编译状态
✅ 兼容性验证

## 📋 影响范围
- 影响的模块
- 破坏性更改（如有）
- 迁移要求（如有）
```

## 升级流程

1. **创建功能分支**: `git checkout -b feat/upgrade-模块名`
2. **进行更改**: 升级合约和配置
3. **测试验证**: 确保编译成功
4. **提交更改**: 使用规范的提交信息
5. **推送分支**: `git push --set-upstream origin 分支名`
6. **创建 PR**: 填写详细的 PR 描述
7. **代码审查**: 邀请团队成员审查
8. **合并**: 确保所有检查通过后合并
