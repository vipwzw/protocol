
# Git 工作流程和权限控制

## ⚠️ 核心原则
**除非用户明确指示，否则不得执行任何 Git 命令**

## 权限控制

### 🚫 绝对禁止自动执行
- `git add` - 添加文件到暂存区
- `git commit` - 提交更改  
- `git push` - 推送到远程仓库
- `git pull` - 拉取远程更改
- `git merge` - 合并分支
- `git rebase` - 变基操作
- `git reset` - 重置操作
- `git checkout` - 切换分支
- `git branch` - 创建/删除分支

### ✅ 允许的只读操作
- `git status` - 查看状态
- `git log` - 查看历史
- `git diff` - 查看差异
- `git remote -v` - 查看远程仓库
- `git branch -l` - 列出分支

## 明确指示识别

### 中文指示词
- "提交代码" / "提交更改"
- "推送代码" / "推送更改"
- "创建分支" / "切换分支"
- "合并分支"
- "添加文件"

### 英文指示词
- "git add" / "git commit" / "git push"
- "commit the changes"
- "push to repository"
- "create branch" / "merge branch"

## 工作流程

### ✅ 正确流程
1. **完成代码更改** - 自动执行编辑操作
2. **询问用户** - "您的更改已完成。如果需要提交代码，请告诉我'提交代码'"
3. **等待明确确认** - 用户说"提交代码"
4. **执行Git操作** - 按指示执行

### ❌ 错误做法
- 自动执行：`git add . && git commit -m "..."`
- 假设用户意图：认为更改完成就应该提交
- 批量操作：同时执行多个git命令而未逐一确认

## 提交工作流 [[memory:3799706]]

当用户明确说"提交代码"时，执行完整流程：
1. `git add .` - 添加所有更改
2. `git commit -m "..."` - 提交更改（生成描述性消息）
3. `git push` - 推送到远程仓库

## 分支状态

### 当前分支
- **feat/upgrade-solidity-to-0.8.19** - Solidity升级分支
- 状态：up to date with origin
- 工作区：clean（无待提交更改）

### 分支管理最佳实践
- 功能开发使用feature分支
- 升级工作使用专门分支
- 保持工作区清洁
- 定期同步远程分支

## 安全保障

### 防止意外操作
- 所有Git写操作需要明确授权
- 读操作可以自由执行
- 提供清晰的操作提示
- 尊重用户的开发节奏

### 异常情况处理
- 当不确定时，选择询问而不是执行
- 保持操作的可逆性
- 提供清晰的回滚建议

## 消息模板

### 建议用语
```
"您的更改已完成。如果需要提交代码，请告诉我'提交代码'，我来帮您执行 git 操作。"
```

### 确认用语  
```
"我将执行以下Git操作：
1. git add . 
2. git commit -m '...'
3. git push
请确认是否继续？"
```

这个规则确保：
- 用户对代码版本控制有完全控制权
- 避免意外的代码提交或推送  
- 保持工作流程的透明性和可控性
- 尊重用户的开发节奏和决策

6. **创建 PR**: 填写详细的 PR 描述
7. **代码审查**: 邀请团队成员审查
8. **合并**: 确保所有检查通过后合并
