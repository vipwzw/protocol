# CI/CD故障排除指南

基于最近的本地CI测试经验，以下是常见问题和解决方案。

## 环境设置问题

### Node.js版本问题
**问题**: TypeScript编译失败，版本不兼容
```bash
error TS5023: Unknown compiler option 'useUnknownInCatchVariables'
```

**解决方案**:
```bash
# 检查Node.js版本
node --version  # 应该是24.x

# 升级Node.js (如果需要)
brew install node@24

# 清理并重新安装依赖
rm -rf node_modules yarn.lock
yarn install --frozen-lockfile
```

### Foundry安装问题
**问题**: Apple Silicon兼容性问题
```bash
Error: "Bad CPU type in executable (os error 86)"
```

**解决方案**:
```bash
# 安装libusb
brew install libusb

# 重新安装Foundry
foundryup

# 验证安装
forge --version
```

## 编译问题

### Solidity编译器版本不兼容
**问题**: 旧版本编译器在Apple Silicon上失败

**解决方案**:
1. 检查foundry.toml配置
2. 使用Docker进行编译：
```bash
# 使用Docker运行编译
docker run --rm -v $(pwd):/workspace \
  ghcr.io/foundry-rs/foundry:latest \
  forge build --root /workspace
```

3. 或者升级合约到新版本Solidity

### TypeScript类型错误
**问题**: 缺少类型定义
```bash
error TS2688: Cannot find type definition file for 'minimatch'
```

**解决方案**:
```bash
# 安装缺失的类型定义
cd packages/contract-addresses
yarn add --dev @types/minimatch

# 或者在根目录添加到workspace
yarn add -W --dev @types/minimatch
```

## 测试问题

### Foundry测试失败
**常见原因**:
1. 缺少Git子模块
2. 编译器版本不匹配
3. 依赖缺失

**解决步骤**:
```bash
# 1. 初始化所有子模块
git submodule update --init --recursive

# 2. 清理并重新编译
forge clean
forge build

# 3. 运行特定测试
forge test --match-contract MyContractTest -vvv

# 4. 检查gas报告
forge test --gas-report
```

### TypeScript测试失败
**常见问题**:
1. 异步操作未正确处理
2. Mock设置不正确
3. 环境变量缺失

**解决方案**:
```bash
# 检查测试配置
cat jest.config.js

# 运行特定测试套件
yarn test --testNamePattern="OrderUtils"

# 查看详细错误
yarn test --verbose --detectOpenHandles
```

## 性能优化

### 编译速度优化
```bash
# 并行编译
export FOUNDRY_PROFILE=ci
forge build --jobs 4

# 增量编译
forge build --force  # 仅在必要时使用
```

### 测试速度优化
```bash
# 并行测试
forge test --jobs 4

# 仅运行快速测试
forge test --no-match-path "**/integration/**"
```

## CI脚本示例

### 完整的CI工作流
```bash
#!/bin/bash
set -e

echo "🔧 设置环境..."
node --version
yarn --version
forge --version

echo "📦 安装依赖..."
yarn install --frozen-lockfile

echo "🏗️ 构建项目..."
yarn build

echo "🧹 代码质量检查..."
yarn lint:contracts
yarn prettier:ci

echo "🧪 运行测试..."
# Governance测试（稳定）
cd contracts/governance
forge test -vvv --gas-report

# 其他测试（如果支持）
cd ../erc20
if forge build; then
    forge test -vvv
else
    echo "⚠️ ERC20测试跳过（编译器兼容性问题）"
fi

echo "✅ CI检查完成！"
```

### 故障排除脚本
```bash
#!/bin/bash
# troubleshoot-ci.sh

echo "🔍 诊断CI问题..."

echo "检查Node.js环境..."
node --version
npm --version
yarn --version

echo "检查Foundry环境..."
foundryup --version || echo "Foundry未安装"
forge --version || echo "Forge不可用"

echo "检查Git子模块..."
git submodule status

echo "检查依赖..."
yarn check --integrity

echo "检查TypeScript配置..."
npx tsc --noEmit --skipLibCheck

echo "诊断完成！"
```

## 常用调试命令

```bash
# 详细的编译输出
forge build --verbose

# 详细的测试输出
forge test -vvvv

# 检查合约大小
forge build --sizes

# 生成覆盖率报告
forge coverage --report summary

# 检查依赖冲突
yarn check --verify-tree

# 清理所有缓存
yarn cache clean
forge clean
rm -rf node_modules
```
---
description: CI/CD troubleshooting guide and common issues
---
