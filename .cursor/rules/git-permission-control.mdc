
---
alwaysApply: true
---

# Git 操作权限控制

## 核心原则

**⚠️ 重要：除非用户明确指示或触发特定操作，否则不得执行任何 Git 命令**

## 自动执行的特殊情况

### Accept All 触发自动本地提交
当用户点击 "accept all" 接受所有代码更改时：
- **自动执行**：`git add .` - 添加所有更改到暂存区
- **自动执行**：`git commit -m "提交描述"` - 提交到本地仓库
- **不执行**：`git push` - 不推送到远程仓库

## 需要明确授权的命令

### 绝对禁止自动执行（除非上述特殊情况）
- `git add` - 添加文件到暂存区（除非 accept all）
- `git commit` - 提交更改（除非 accept all）
- `git push` - 推送到远程仓库
- `git pull` - 拉取远程更改
- `git merge` - 合并分支
- `git rebase` - 变基操作
- `git reset` - 重置操作
- `git checkout` - 切换分支
- `git branch` - 创建/删除分支

### 允许的只读操作
- `git status` - 查看状态
- `git log` - 查看历史
- `git diff` - 查看差异
- `git remote -v` - 查看远程仓库
- `git branch -l` - 列出分支

## 明确指示的识别

用户必须使用以下明确的词语才能执行需要授权的 Git 操作：

### 中文指示
- "提交代码"
- "推送代码" 
- "创建分支"
- "合并分支"
- "添加文件"
- "git 提交"
- "git 推送"

### 英文指示
- "git add"
- "git commit"
- "git push"
- "commit the changes"
- "push to repository"

## 工作流程

### Accept All 流程
1. **用户操作** - 点击 "accept all" 接受所有更改
2. **自动执行** - `git add .` 添加所有更改
3. **自动执行** - `git commit -m "..."` 提交到本地
4. **完成** - 本地提交完成，不推送远程

### 手动推送流程
1. **代码更改** - 已通过 accept all 自动提交到本地
2. **用户指示** - 明确表示"推送代码"或"git push"
3. **执行操作** - `git push` 推送到远程仓库

### 其他 Git 操作流程
1. **代码更改** - 自动执行编辑操作
2. **询问用户** - "是否需要提交这些更改？"
3. **等待确认** - 用户明确表示"提交代码"
4. **执行操作** - 按用户指示执行 git 命令

### 错误做法
❌ 在非 accept all 情况下自动执行：`git add . && git commit -m "..."`
❌ 假设用户意图：认为更改完成就应该提交
❌ Accept all 后自动推送：`git push`

## 特殊情况

### 主动建议的情况
只有在以下情况下可以主动建议（但不执行）git 操作：
- 用户明确询问如何提交代码
- 发现工作区有大量未提交的更改
- 用户要求查看 git 状态

### 建议措辞
- Accept all 后："代码已自动提交到本地仓库。如需推送到远程，请告诉我'推送代码'。"
- 手动更改后："您的更改已完成。如果需要提交代码，请告诉我'提交代码'。"

## 记忆要点

这个规则确保：
- Accept all 操作触发便捷的本地版本控制
- 用户对远程推送有完全的控制权
- 避免意外的远程代码推送
- 保持工作流程的透明性和可控性
- 尊重用户的开发节奏和决策

**核心原则：Accept all 触发本地提交，明确指令才推送远程。**


**记住：当不确定时，总是选择询问而不是执行。**
