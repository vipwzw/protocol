---
alwaysApply: true
---

# Git 操作权限控制

## 核心原则

**⚠️ 重要：除非用户明确指示，否则不得执行任何 Git 命令**

## 需要明确授权的命令

### 绝对禁止自动执行
- `git add` - 添加文件到暂存区
- `git commit` - 提交更改
- `git push` - 推送到远程仓库
- `git pull` - 拉取远程更改
- `git merge` - 合并分支
- `git rebase` - 变基操作
- `git reset` - 重置操作
- `git checkout` - 切换分支
- `git branch` - 创建/删除分支

### 允许的只读操作
- `git status` - 查看状态
- `git log` - 查看历史
- `git diff` - 查看差异
- `git remote -v` - 查看远程仓库
- `git branch -l` - 列出分支

## 明确指示的识别

用户必须使用以下明确的词语才能执行 Git 操作：

### 中文指示
- "提交代码"
- "推送代码" 
- "创建分支"
- "合并分支"
- "添加文件"
- "git 提交"
- "git 推送"

### 英文指示
- "git add"
- "git commit"
- "git push"
- "commit the changes"
- "push to repository"

## 工作流程

### 正确流程
1. **代码更改** - 自动执行编辑操作
2. **询问用户** - "是否需要提交这些更改？"
3. **等待确认** - 用户明确表示"提交代码"
4. **执行操作** - 按用户指示执行 git 命令

### 错误做法
❌ 自动执行：`git add . && git commit -m "..."`
❌ 假设用户意图：认为更改完成就应该提交
❌ 批量操作：同时执行多个 git 命令而未逐一确认

## 特殊情况

### 唯一例外
只有在以下情况下可以主动建议（但不执行）git 操作：
- 用户明确询问如何提交代码
- 发现工作区有大量未提交的更改
- 用户要求查看 git 状态

### 建议措辞
"您的更改已完成。如果需要提交代码，请告诉我'提交代码'，我来帮您执行 git 操作。"

## 记忆要点

这个规则确保：
- 用户对代码版本控制有完全的控制权
- 避免意外的代码提交或推送
- 保持工作流程的透明性和可控性
- 尊重用户的开发节奏和决策

**记住：当不确定时，总是选择询问而不是执行。**
